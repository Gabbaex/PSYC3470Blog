{"title":"Week 11 data wrangling","markdown":{"yaml":{"title":"Week 11 data wrangling","author":"Gabi Yepez","date":"2023-04-24","categories":["data wrangling"],"image":"galaxy-brain-meme.jpg"},"headingText":"select single column by name, uses pipe operator","containsRefs":false,"markdown":"\n\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyverse)\n```\n\n```{r}\nbudget <- read_csv(\"data/budget.csv\", show_col_types = FALSE)\n\nview(budget)\n```\n\n```{r}\nproduct_dat <- budget %>% select(product)\n\n# select single column by number\nproduct_dat <- budget %>% select(2) \n\nproduct_dat <- budget %>% select(2,3)\n```\n\n```{r}\n# to print column 2 n 3 - not assigned so prints by default\nbudget %>% select(2,3)\n\n#can also type name of variable to print\nproduct_dat\n\n#will look better rendered w html\nknitr::kable(product_dat)\n```\n\n### colon notation\n\n```{r}\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n\n# select columns with colon\nsales2019 <- budget %>% select(region:sales_2019)\n\n#select columns w colon\nyears <- budget %>% select(3:7)\nyears <- budget %>% select(sales_2019:satisfaction_2020)\nyears\n\n# excluding colums using minus\n\n# de-select individual columns\nsales <- budget %>% select(-expenses_2019, -expenses_2020)\n\n# de-select a range of columns\nsales <- budget %>% select(-(expenses_2019:expenses_2020))\nsales\n```\n\n```{r}\n# select all rows where region equals North\nbudget %>% filter(region == \"North\")\n\n# select all rows where expenses_2020 were exactly equal to 200\nbudget %>% filter(expenses_2020 == 200)\n\n# select all rows where sales_2019 was more than 100\nbudget %>% filter(sales_2019 > 100)\n\n# everything but the North\nbudget %>% filter(region != \"North\")\n```\n\n```{r}\n# regions and products with profit in both 2019 and 2020\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019,\n    sales_2020 > expenses_2020\n  )\n\n# the same as above, using & instead of a comma\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 &\n    sales_2020 > expenses_2020\n  )\n\n# regions and products with profit in 2019 or 2020\nprofit_either <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 |\n    sales_2020 > expenses_2020\n  )\n\n# 2020 profit greater than 1000\nprofit_1000 <- budget %>%\n  filter(sales_2020 - expenses_2020 > 1000)\n```\n\n### in\n\n```{r}\n# retain any rows where region is north or south, and where product equals widget\nbudget %>%\n  filter(region %in% c(\"North\", \"South\"),\n         product == \"widgets\")\n\n# retain any rows where the region is not east or west, and where the product does not equal gadgets\nbudget %>%\n  filter(!region %in% c(\"East\", \"West\"),\n         product != \"gadgets\")\n```\n\n```{r}\n#more in examples\na <- c(1:5)\n\n#looks through and outcomes true or false\n6 %in% a\n1 %in% a\n\n#to check if not in\nif(1 %in% a == TRUE){\n  \"yes\"\n}\n\nif(6 %in% a == FALSE){\n  \"yes\"\n}\n\n#default variable 'letters' prints out a-z\nletters\nLETTERS\n\nwhich(letters %in% \"g\", arr.ind = TRUE) #where is index of letter\n```\n\n### arrange\n\n```{r}\n# arranging the table \n# first by product in alphabetical order\n# then by \"region\" in reverse alphabetical order\nbudget %>%\n  arrange(product, desc(region))\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","editor":"visual","theme":"cosmo","title-block-banner":true,"title":"Week 11 data wrangling","author":"Gabi Yepez","date":"2023-04-24","categories":["data wrangling"],"image":"galaxy-brain-meme.jpg"},"extensions":{"book":{"multiFile":true}}}}}
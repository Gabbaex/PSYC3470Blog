{
  "hash": "1d9ecd060e9f69ac8f2271ecdda46105",
  "result": {
    "markdown": "---\ntitle: \"Midterm part 1\"\nauthor: \"Gabi Yepez\"\ndate: \"2023-03-15\"\ncategories: [midterm]\nimage: \"galaxy-brain-meme.jpg\"\n---\n\n\n### midterm stuff\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1\n\na<-1\nb<-2\nc<-3\n\n(a+b) / c\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# 2\n\nsolution <- 1:100\n\na <- c()\n\nfor(i in 1:100) {\n  a[i] <- i\n}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n:::\n\n```{.r .cell-code}\ni <- 0\na <- c()\nwhile(i <= 100) {\n  i <- i+1\n  a[i] <- i\n}\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101\n```\n:::\n:::\n\n\nwrite sum for all integers between two values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(50:100) # easy way but have to write function to find it\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3825\n```\n:::\n\n```{.r .cell-code}\n# function syntax\nsum_sequence <- function(min,max){\n  return(sum(min:max))\n}\n\nsum_sequence(min=5, max=100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5040\n```\n:::\n\n```{.r .cell-code}\nsum_sequence_loop <- function(min,max){\n  a <- 0\n   for(i in min:max){\n    a <- a+i\n   }\n  return(a)\n}\n```\n:::\n\n\ngenerate 100 random \\#\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(50,0,50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 40.6850699 20.7507275 16.7218426 41.6816578 11.8512798 14.9010099\n [7] 10.2455750 38.6183498  5.7481314  2.9353891  3.8709864 31.3300694\n[13] 36.2028564 20.1855848 14.9230001 25.2249102  1.5906567  4.0943794\n[19] 16.0861012 25.8957564 36.9638118 23.7764215  1.4391205 31.5324788\n[25] 33.3995359 25.7679447 17.8562932 25.2740141 10.5641548  0.2237807\n[31] 10.9752273 16.8343900 30.8920182 46.7623247  0.1058168 31.7257335\n[37] 28.7681684 38.0196937 11.5332139  6.7424573  4.4257822 26.3798523\n[43]  6.1600703  3.2117509 24.6608501 20.9067647  7.6481744 45.6553954\n[49]  7.8124883 24.9842732\n```\n:::\n:::\n\n\n### number 10\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## mean\n\n##\n\nmean_B <- function(x){\n  temp_sum <- 0\n  temp_length <- 0\n  for(i in x){\n  temp_sum <- temp_sum+i\n  temp_length <- temp_length+1\n  }\n  \n  return(temp_sum/temp_length)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## mode xxx use chat gbt\n\ne <- c(1,1,1,1,1,2,3,4,5)\n\nmy_unique <- function(x){\n  unique_number <- c()\n  counter <- 0\n  for(i in x){\n    \n    test_unique <- i == unique_number\n    if(sum(test_unique) > 0) {\n      counter <- counter+1\n      unique_number[counter] <- unique_number\n    }\n    \n    print(sum(test_unique))\n    \n  }\n  \n  return(unique_number)\n}\n\nmy_unique(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n[1] 0\n[1] 0\n[1] 0\n[1] 0\n[1] 0\n[1] 0\n[1] 0\n[1] 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n### 1\n\n>R objects: show that you understand and can create/use objects of various types, including at least: character/string, numeric, integer, logical, data.frame, and list. Show that you can index objects appropriately (e.g., locate elements of an object, change elements of an object etc.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- c(\"Red\", \"Green\", \"Blue\")\ne <- c(0.5,1.0,1.5,2.0,2.5)\nf <- c(1,2,3,4,5)\ng <- c(\"One\", \"Two\", \"Three\")\nh <- e + f\n\nf > e\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\nd == g\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nh == e + f\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ntypeof(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nis.integer(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ntypeof(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nis.character(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.character(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\ndf <- data.frame (colors = c(\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"), levels = c(10, 8, 6, 4, 2, 0), more_colors = c(\"firebrick\", \"chocolate\", \"gold\", \"seagreen\", \"deepskyblue\", \"magenta\"))\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  colors levels more_colors\n1    red     10   firebrick\n2 orange      8   chocolate\n3 yellow      6        gold\n4  green      4    seagreen\n5   blue      2 deepskyblue\n6 purple      0     magenta\n```\n:::\n\n```{.r .cell-code}\nlist1 <- list(d, c(\"Yellow\", \"Green\", \"Purple\", \"Orange\"))\nprint(list1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Red\"   \"Green\" \"Blue\" \n\n[[2]]\n[1] \"Yellow\" \"Green\"  \"Purple\" \"Orange\"\n```\n:::\n:::\n\n\n### 2\n\n>Logical operations: show that you understand and can use logical operators in R (e.g., == | > < >= <=)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 == 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n2 == 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n489 != 489\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n245 <= 246\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ng > d\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\ng < d\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ne >= f\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nh >= f\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\ne + f == h\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\n16 %% 4 == 0 | 16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n8 %% 2 == 0 & 8 %% 4 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### 3\n\n>Loops: Show that you understand the components of a for loop, and that you can use a for loop.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nj <- c(0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0)\n\nfor (i in j) {\n  if (i == 0) {\n    print(\"zero\")\n  } else {\n    print(\"one\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"zero\"\n[1] \"zero\"\n[1] \"zero\"\n[1] \"one\"\n[1] \"zero\"\n[1] \"one\"\n[1] \"one\"\n[1] \"zero\"\n[1] \"one\"\n[1] \"one\"\n[1] \"zero\"\n```\n:::\n\n```{.r .cell-code}\nfor (i in f) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nfor (x in j) {\n  print(x + 2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n[1] 2\n[1] 2\n[1] 3\n[1] 2\n[1] 3\n[1] 3\n[1] 2\n[1] 3\n[1] 3\n[1] 2\n```\n:::\n:::\n\n\n### 4\n\n>Functions: Show that you understand the syntax for declaring your own function, and that you can declare and run your own custom function to accomplish some task (you choose what the function does).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf1 <- function(l) {\n  for(i in l) {\n    m <- i - 3\n    print(m)\n  }\n}\n\nf1(9000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8997\n```\n:::\n\n```{.r .cell-code}\nf2 <- function() {\n  for(i in 300:0) {\n    print(i-3)\n  }\n}\n\nf2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 297\n[1] 296\n[1] 295\n[1] 294\n[1] 293\n[1] 292\n[1] 291\n[1] 290\n[1] 289\n[1] 288\n[1] 287\n[1] 286\n[1] 285\n[1] 284\n[1] 283\n[1] 282\n[1] 281\n[1] 280\n[1] 279\n[1] 278\n[1] 277\n[1] 276\n[1] 275\n[1] 274\n[1] 273\n[1] 272\n[1] 271\n[1] 270\n[1] 269\n[1] 268\n[1] 267\n[1] 266\n[1] 265\n[1] 264\n[1] 263\n[1] 262\n[1] 261\n[1] 260\n[1] 259\n[1] 258\n[1] 257\n[1] 256\n[1] 255\n[1] 254\n[1] 253\n[1] 252\n[1] 251\n[1] 250\n[1] 249\n[1] 248\n[1] 247\n[1] 246\n[1] 245\n[1] 244\n[1] 243\n[1] 242\n[1] 241\n[1] 240\n[1] 239\n[1] 238\n[1] 237\n[1] 236\n[1] 235\n[1] 234\n[1] 233\n[1] 232\n[1] 231\n[1] 230\n[1] 229\n[1] 228\n[1] 227\n[1] 226\n[1] 225\n[1] 224\n[1] 223\n[1] 222\n[1] 221\n[1] 220\n[1] 219\n[1] 218\n[1] 217\n[1] 216\n[1] 215\n[1] 214\n[1] 213\n[1] 212\n[1] 211\n[1] 210\n[1] 209\n[1] 208\n[1] 207\n[1] 206\n[1] 205\n[1] 204\n[1] 203\n[1] 202\n[1] 201\n[1] 200\n[1] 199\n[1] 198\n[1] 197\n[1] 196\n[1] 195\n[1] 194\n[1] 193\n[1] 192\n[1] 191\n[1] 190\n[1] 189\n[1] 188\n[1] 187\n[1] 186\n[1] 185\n[1] 184\n[1] 183\n[1] 182\n[1] 181\n[1] 180\n[1] 179\n[1] 178\n[1] 177\n[1] 176\n[1] 175\n[1] 174\n[1] 173\n[1] 172\n[1] 171\n[1] 170\n[1] 169\n[1] 168\n[1] 167\n[1] 166\n[1] 165\n[1] 164\n[1] 163\n[1] 162\n[1] 161\n[1] 160\n[1] 159\n[1] 158\n[1] 157\n[1] 156\n[1] 155\n[1] 154\n[1] 153\n[1] 152\n[1] 151\n[1] 150\n[1] 149\n[1] 148\n[1] 147\n[1] 146\n[1] 145\n[1] 144\n[1] 143\n[1] 142\n[1] 141\n[1] 140\n[1] 139\n[1] 138\n[1] 137\n[1] 136\n[1] 135\n[1] 134\n[1] 133\n[1] 132\n[1] 131\n[1] 130\n[1] 129\n[1] 128\n[1] 127\n[1] 126\n[1] 125\n[1] 124\n[1] 123\n[1] 122\n[1] 121\n[1] 120\n[1] 119\n[1] 118\n[1] 117\n[1] 116\n[1] 115\n[1] 114\n[1] 113\n[1] 112\n[1] 111\n[1] 110\n[1] 109\n[1] 108\n[1] 107\n[1] 106\n[1] 105\n[1] 104\n[1] 103\n[1] 102\n[1] 101\n[1] 100\n[1] 99\n[1] 98\n[1] 97\n[1] 96\n[1] 95\n[1] 94\n[1] 93\n[1] 92\n[1] 91\n[1] 90\n[1] 89\n[1] 88\n[1] 87\n[1] 86\n[1] 85\n[1] 84\n[1] 83\n[1] 82\n[1] 81\n[1] 80\n[1] 79\n[1] 78\n[1] 77\n[1] 76\n[1] 75\n[1] 74\n[1] 73\n[1] 72\n[1] 71\n[1] 70\n[1] 69\n[1] 68\n[1] 67\n[1] 66\n[1] 65\n[1] 64\n[1] 63\n[1] 62\n[1] 61\n[1] 60\n[1] 59\n[1] 58\n[1] 57\n[1] 56\n[1] 55\n[1] 54\n[1] 53\n[1] 52\n[1] 51\n[1] 50\n[1] 49\n[1] 48\n[1] 47\n[1] 46\n[1] 45\n[1] 44\n[1] 43\n[1] 42\n[1] 41\n[1] 40\n[1] 39\n[1] 38\n[1] 37\n[1] 36\n[1] 35\n[1] 34\n[1] 33\n[1] 32\n[1] 31\n[1] 30\n[1] 29\n[1] 28\n[1] 27\n[1] 26\n[1] 25\n[1] 24\n[1] 23\n[1] 22\n[1] 21\n[1] 20\n[1] 19\n[1] 18\n[1] 17\n[1] 16\n[1] 15\n[1] 14\n[1] 13\n[1] 12\n[1] 11\n[1] 10\n[1] 9\n[1] 8\n[1] 7\n[1] 6\n[1] 5\n[1] 4\n[1] 3\n[1] 2\n[1] 1\n[1] 0\n[1] -1\n[1] -2\n[1] -3\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
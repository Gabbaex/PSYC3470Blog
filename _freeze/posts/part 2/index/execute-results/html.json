{
  "hash": "4898b6bf19d79b744bc5b86fd975f739",
  "result": {
    "markdown": "---\ntitle: \"Midterm part 2\"\nauthor: \"Gabi Yepez\"\ndate: \"2023-03-28\"\ncategories: [midterm]\nimage: \"galaxy-brain-meme.jpg\"\n---\n\n\n# M2: *Solving Problems*\n\n## 1\n\n>Do simple math with numbers, addition, subtraction, multiplication, division\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n3-4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n\n```{.r .cell-code}\n4*4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n\n```{.r .cell-code}\n10/2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n## 2\n\n>Put numbers into variables, do simple math on the variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\na<-1\nb<-2\nc<-3\n\n(a+b) / c\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## 3\n\n>Write code that will place the numbers 1 to 100 separately into a variable using for loop. Then, again using the seq function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsolution <- 1:100\n\na <- c()\n\nfor(i in 1:100) {\n  a[i] <- i\n}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n:::\n\n```{.r .cell-code}\ni <- 0\na <- c()\nwhile(i <= 100) {\n  i <- i+1\n  a[i] <- i\n}\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101\n```\n:::\n:::\n\n\n## 5\n\n>Write a function to find the sum of all integers between any two values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(50:100) # easy way but have to write function to find it\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3825\n```\n:::\n\n```{.r .cell-code}\n# function syntax\nsum_sequence <- function(min,max){\n  return(sum(min:max))\n}\n\nsum_sequence(min=5, max=100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5040\n```\n:::\n\n```{.r .cell-code}\nsum_sequence_loop <- function(min,max){\n  a <- 0\n   for(i in min:max){\n    a <- a+i\n   }\n  return(a)\n}\n```\n:::\n\n\n## 7\n\n>List all of the prime numbers from 1 to 1000\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:1000\n\nisprime <- function(x) {\n  generate_sequence <- 1:x\n  counter <- 0\n  for(i in generate_sequence){\n    if(x%%i == 0){\n      counter <- counter+1\n    }\n  }\n  \n  if(counter <= 2) {\n    return(TRUE)\n  } else{\n    return(FALSE)\n  }\n}\n\nfor(i in a){\n  if(isprime(i) == TRUE) print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 5\n[1] 7\n[1] 11\n[1] 13\n[1] 17\n[1] 19\n[1] 23\n[1] 29\n[1] 31\n[1] 37\n[1] 41\n[1] 43\n[1] 47\n[1] 53\n[1] 59\n[1] 61\n[1] 67\n[1] 71\n[1] 73\n[1] 79\n[1] 83\n[1] 89\n[1] 97\n[1] 101\n[1] 103\n[1] 107\n[1] 109\n[1] 113\n[1] 127\n[1] 131\n[1] 137\n[1] 139\n[1] 149\n[1] 151\n[1] 157\n[1] 163\n[1] 167\n[1] 173\n[1] 179\n[1] 181\n[1] 191\n[1] 193\n[1] 197\n[1] 199\n[1] 211\n[1] 223\n[1] 227\n[1] 229\n[1] 233\n[1] 239\n[1] 241\n[1] 251\n[1] 257\n[1] 263\n[1] 269\n[1] 271\n[1] 277\n[1] 281\n[1] 283\n[1] 293\n[1] 307\n[1] 311\n[1] 313\n[1] 317\n[1] 331\n[1] 337\n[1] 347\n[1] 349\n[1] 353\n[1] 359\n[1] 367\n[1] 373\n[1] 379\n[1] 383\n[1] 389\n[1] 397\n[1] 401\n[1] 409\n[1] 419\n[1] 421\n[1] 431\n[1] 433\n[1] 439\n[1] 443\n[1] 449\n[1] 457\n[1] 461\n[1] 463\n[1] 467\n[1] 479\n[1] 487\n[1] 491\n[1] 499\n[1] 503\n[1] 509\n[1] 521\n[1] 523\n[1] 541\n[1] 547\n[1] 557\n[1] 563\n[1] 569\n[1] 571\n[1] 577\n[1] 587\n[1] 593\n[1] 599\n[1] 601\n[1] 607\n[1] 613\n[1] 617\n[1] 619\n[1] 631\n[1] 641\n[1] 643\n[1] 647\n[1] 653\n[1] 659\n[1] 661\n[1] 673\n[1] 677\n[1] 683\n[1] 691\n[1] 701\n[1] 709\n[1] 719\n[1] 727\n[1] 733\n[1] 739\n[1] 743\n[1] 751\n[1] 757\n[1] 761\n[1] 769\n[1] 773\n[1] 787\n[1] 797\n[1] 809\n[1] 811\n[1] 821\n[1] 823\n[1] 827\n[1] 829\n[1] 839\n[1] 853\n[1] 857\n[1] 859\n[1] 863\n[1] 877\n[1] 881\n[1] 883\n[1] 887\n[1] 907\n[1] 911\n[1] 919\n[1] 929\n[1] 937\n[1] 941\n[1] 947\n[1] 953\n[1] 967\n[1] 971\n[1] 977\n[1] 983\n[1] 991\n[1] 997\n```\n:::\n:::\n\n\n## 9\n\n>Generate 100 random numbers within a specific range\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(100,0,100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 38.4460402 18.8109610 81.4764684  5.9846350 47.5998659  0.5002947\n  [7] 58.8629854 24.3857950  8.8112542 24.4202507 73.1221106 15.9664839\n [13] 51.2393622 88.5001608 49.3644173 82.2441335 86.5604895 30.6692167\n [19] 78.9017979 49.9996889 34.5128218 99.5474071 70.4703591 94.3992064\n [25] 52.7719136 16.3864006 93.0940565 69.1515604 86.7646683 17.0932303\n [31] 39.3824297 47.3377307 45.9282081 27.6066296 65.2907881 85.8274328\n [37] 13.7077113 85.2031423 10.3178386 19.3744259 42.0550555 15.7518199\n [43] 16.5074873 51.5529221 77.8079883 10.9786431  8.7976851 99.0213323\n [49] 59.1460075 44.2164646 54.4548418 42.1205293  1.4002525 36.4343556\n [55] 35.5599088 84.8886137  8.2157600 82.6872953 45.1546091 92.1759529\n [61] 53.7526680  5.7502143 74.6439151 37.7606502 56.6826358 42.7893124\n [67] 88.6639115  8.0072669 28.5926506 97.7251843 73.1564247 91.1857953\n [73] 28.9698689 73.7019798 71.5824657 69.2111972 77.2937644 17.1498989\n [79] 66.2388874 62.1702486 47.5984443 11.0783448 48.8793500 16.2428285\n [85] 10.7575518 47.3800598  8.9071838 50.4350245 58.8094410 43.6822130\n [91] 95.6646716 86.4926978 65.9957021 44.9295191 73.4480157  3.3766167\n [97] 64.7449806 28.1723492 83.1551350 47.1781888\n```\n:::\n:::\n\n\n## 10\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## mean\n\nmean_B <- function(x){\n  temp_sum <- 0\n  temp_length <- 0\n  for(i in x){\n  temp_sum <- temp_sum+i\n  temp_length <- temp_length+1\n  }\n  \n  return(temp_sum/temp_length)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## mode \n\ne <- c(1,1,1,1,1,2,3,4,5)\n\nmy_unique <- function(x){\n  unique_number <- c()\n  counter <- 0\n  for(i in x){\n    \n    test_unique <- i == unique_number\n    if(sum(test_unique) > 0) {\n      counter <- counter+1\n      unique_number[counter] <- unique_number\n    }\n    \n    print(sum(test_unique))\n    \n  }\n  \n  return(unique_number)\n}\n```\n:::\n\n## Harder Problems\n##### (*thank you chatgbt*)\n\n### 1 Fizzbuzz\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the range of numbers\nnumbers <- 1:100\n\n# Loop through each number in the range\nfor (i in numbers) {\n  \n  # If the number is divisible by 3 and 5, print \"FizzBuzz\"\n  if (i %% 3 == 0 & i %% 5 == 0) {\n    print(\"FizzBuzz\")\n    \n  # If the number is divisible by 3, print \"Fizz\"\n  } else if (i %% 3 == 0) {\n    print(\"Fizz\")\n    \n  # If the number is divisible by 5, print \"Buzz\"\n  } else if (i %% 5 == 0) {\n    print(\"Buzz\")\n    \n  # Otherwise, print the number itself\n  } else {\n    print(i)\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] \"Fizz\"\n[1] 4\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 7\n[1] 8\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 11\n[1] \"Fizz\"\n[1] 13\n[1] 14\n[1] \"FizzBuzz\"\n[1] 16\n[1] 17\n[1] \"Fizz\"\n[1] 19\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 22\n[1] 23\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 26\n[1] \"Fizz\"\n[1] 28\n[1] 29\n[1] \"FizzBuzz\"\n[1] 31\n[1] 32\n[1] \"Fizz\"\n[1] 34\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 37\n[1] 38\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 41\n[1] \"Fizz\"\n[1] 43\n[1] 44\n[1] \"FizzBuzz\"\n[1] 46\n[1] 47\n[1] \"Fizz\"\n[1] 49\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 52\n[1] 53\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 56\n[1] \"Fizz\"\n[1] 58\n[1] 59\n[1] \"FizzBuzz\"\n[1] 61\n[1] 62\n[1] \"Fizz\"\n[1] 64\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 67\n[1] 68\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 71\n[1] \"Fizz\"\n[1] 73\n[1] 74\n[1] \"FizzBuzz\"\n[1] 76\n[1] 77\n[1] \"Fizz\"\n[1] 79\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 82\n[1] 83\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 86\n[1] \"Fizz\"\n[1] 88\n[1] 89\n[1] \"FizzBuzz\"\n[1] 91\n[1] 92\n[1] \"Fizz\"\n[1] 94\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 97\n[1] 98\n[1] \"Fizz\"\n[1] \"Buzz\"\n```\n:::\n:::\n\n\n### 2 Dice-rolling simulations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set the number of dice rolls\nnum_rolls <- 100\n\n# simulate rolling a six-sided dice\ndice_rolls <- sample(1:6, num_rolls, replace = TRUE)\n\n# print the results\nprint(dice_rolls)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 5 4 4 3 1 2 3 5 6 5 4 2 1 6 6 6 2 1 6 5 2 1 3 4 6 3 3 2 4 6 6 5 6 4 4 2 2\n [38] 2 5 5 2 3 3 6 1 3 3 2 3 4 3 4 1 2 3 1 5 2 6 5 4 2 6 5 4 2 3 2 4 3 6 2 1 4\n [75] 6 2 6 1 3 3 2 3 4 6 4 3 6 4 4 4 6 5 1 4 5 3 3 3 1 4\n```\n:::\n:::\n\n\n### 3 Snakes and Ladders\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up the game board\ngame_board <- data.frame(\n  start = c(1, 4, 9, 16, 21, 28, 36, 44, 52, 67, 71, 80, 87),\n  end = c(38, 14, 31, 6, 42, 84, 44, 26, 72, 86, 91, 100, 24)\n)\n\n# Define a function to simulate a single turn\nsimulate_turn <- function(current_position) {\n  # Roll the dice\n  dice_roll <- sample(1:6, 1)\n\n  # Move the player\n  new_position <- current_position + dice_roll\n\n  # Check for a ladder or snake\n  ladder_or_snake <- which(game_board$start == new_position)\n  if (length(ladder_or_snake) > 0) {\n    new_position <- game_board$end[ladder_or_snake]\n    message(paste0(\"Landed on a ladder! Moving to position \", new_position, \".\"))\n  } else {\n    ladder_or_snake <- which(game_board$end == new_position)\n    if (length(ladder_or_snake) > 0) {\n      new_position <- game_board$start[ladder_or_snake]\n      message(paste0(\"Landed on a snake! Moving to position \", new_position, \".\"))\n    }\n  }\n\n  # Make sure the player didn't go past the end of the board\n  if (new_position > 100) {\n    new_position <- current_position\n  }\n\n  # Return the new position\n  return(new_position)\n}\n\n# Define a function to simulate a full game\nsimulate_game <- function() {\n  # Initialize the game\n  position <- 0\n  turns <- 0\n\n  # Loop until the player reaches the end of the board\n  while (position < 100) {\n    # Simulate a turn\n    position <- simulate_turn(position)\n    turns <- turns + 1\n\n    # Print the current position\n    message(paste0(\"Current position: \", position, \".\"))\n  }\n\n  # Print the number of turns it took to win\n  message(paste0(\"You won in \", turns, \" turns!\"))\n}\n\n# Run the game\nsimulate_game()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 3.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 16.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 16.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 17.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 20.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 22.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 23.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 29.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 9.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 9.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 11.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 12.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a ladder! Moving to position 6.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 6.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 10.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 10.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 13.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a ladder! Moving to position 6.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 6.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 12.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a ladder! Moving to position 6.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 6.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 8.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a ladder! Moving to position 31.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 31.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 35.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 39.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 40.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 43.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 47.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 50.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 54.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 57.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 60.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 66.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 52.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 52.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 58.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 60.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 63.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 64.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 65.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a ladder! Moving to position 86.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 86.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 88.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 93.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 99.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 80.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 80.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 28.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 28.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 9.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 9.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 10.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a snake! Moving to position 4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 8.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a ladder! Moving to position 31.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 31.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 35.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 40.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 41.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 46.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 50.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a ladder! Moving to position 72.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 72.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 78.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 79.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLanded on a ladder! Moving to position 100.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCurrent position: 100.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nYou won in 58 turns!\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
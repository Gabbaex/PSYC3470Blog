{
  "hash": "120befb6b9caf75ccf4e859c2c4b6715",
  "result": {
    "markdown": "---\ntitle: \"Week 11: Data Wrangling\"\nauthor: \"Gabi Yepez\"\ndate: \"2023-04-24\"\ncategories: [Data Wrangling]\nimage: \"galaxy-brain-meme.jpg\"\n---\n\n\n\n### \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2\n──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ stringr 1.5.0\n✔ tidyr   1.3.0     ✔ forcats 1.0.0\n✔ readr   2.1.3     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget <- read_csv(\"data/budget.csv\", show_col_types = FALSE)\n\nview(budget)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# select single column by name, uses pipe operator\nproduct_dat <- budget %>% select(product)\n\n# select single column by number\nproduct_dat <- budget %>% select(2) \n\nproduct_dat <- budget %>% select(2,3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# to print column 2 n 3 - not assigned so prints by default\nbudget %>% select(2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  product sales_2019\n  <chr>        <dbl>\n1 widgets       2129\n2 gadgets        723\n3 widgets       1123\n4 gadgets       2022\n5 widgets       -728\n6 gadgets       -423\n7 widgets        633\n8 gadgets       1204\n```\n:::\n\n```{.r .cell-code}\n#can also type name of variable to print\nproduct_dat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  product sales_2019\n  <chr>        <dbl>\n1 widgets       2129\n2 gadgets        723\n3 widgets       1123\n4 gadgets       2022\n5 widgets       -728\n6 gadgets       -423\n7 widgets        633\n8 gadgets       1204\n```\n:::\n\n```{.r .cell-code}\n#will look better rendered w html\nknitr::kable(product_dat)\n```\n\n::: {.cell-output-display}\n|product | sales_2019|\n|:-------|----------:|\n|widgets |       2129|\n|gadgets |        723|\n|widgets |       1123|\n|gadgets |       2022|\n|widgets |       -728|\n|gadgets |       -423|\n|widgets |        633|\n|gadgets |       1204|\n:::\n:::\n\n\n### colon notation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n\n# select columns with colon\nsales2019 <- budget %>% select(region:sales_2019)\n\n#select columns w colon\nyears <- budget %>% select(3:7)\nyears <- budget %>% select(sales_2019:satisfaction_2020)\nyears\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 6\n  sales_2019 sales_2020 expenses_2019 expenses_2020 satisfaction_2019 satisfac…¹\n       <dbl>      <dbl>         <dbl>         <dbl> <chr>             <chr>     \n1       2129       -517           822          -897 high              very high \n2        723         77          1037          1115 very high         very high \n3       1123      -1450          1004           672 high              neutral   \n4       2022       -945          -610           200 low               low       \n5       -728        -51          -801          -342 very low          very low  \n6       -423       -354            94          2036 neutral           high      \n7        633        790           783          -315 neutral           neutral   \n8       1204        426           433          -136 low               low       \n# … with abbreviated variable name ¹​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# excluding colums using minus\n\n# de-select individual columns\nsales <- budget %>% select(-expenses_2019, -expenses_2020)\n\n# de-select a range of columns\nsales <- budget %>% select(-(expenses_2019:expenses_2020))\nsales\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 6\n  region product sales_2019 sales_2020 satisfaction_2019 satisfaction_2020\n  <chr>  <chr>        <dbl>      <dbl> <chr>             <chr>            \n1 North  widgets       2129       -517 high              very high        \n2 North  gadgets        723         77 very high         very high        \n3 South  widgets       1123      -1450 high              neutral          \n4 South  gadgets       2022       -945 low               low              \n5 East   widgets       -728        -51 very low          very low         \n6 East   gadgets       -423       -354 neutral           high             \n7 West   widgets        633        790 neutral           neutral          \n8 West   gadgets       1204        426 low               low              \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# select all rows where region equals North\nbudget %>% filter(region == \"North\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# select all rows where expenses_2020 were exactly equal to 200\nbudget %>% filter(expenses_2020 == 200)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  gadgets       2022       -945          -610         200 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# select all rows where sales_2019 was more than 100\nbudget %>% filter(sales_2019 > 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  widgets       1123      -1450          1004         672 high    neutral\n4 South  gadgets       2022       -945          -610         200 low     low    \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# everything but the North\nbudget %>% filter(region != \"North\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  widgets       1123      -1450          1004         672 high    neutral\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   widgets       -728        -51          -801        -342 very l… very l…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# regions and products with profit in both 2019 and 2020\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019,\n    sales_2020 > expenses_2020\n  )\n\n# the same as above, using & instead of a comma\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 &\n    sales_2020 > expenses_2020\n  )\n\n# regions and products with profit in 2019 or 2020\nprofit_either <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 |\n    sales_2020 > expenses_2020\n  )\n\n# 2020 profit greater than 1000\nprofit_1000 <- budget %>%\n  filter(sales_2020 - expenses_2020 > 1000)\n```\n:::\n\n\n### in\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# retain any rows where region is north or south, and where product equals widget\nbudget %>%\n  filter(region %in% c(\"North\", \"South\"),\n         product == \"widgets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\n# retain any rows where the region is not east or west, and where the product does not equal gadgets\nbudget %>%\n  filter(!region %in% c(\"East\", \"West\"),\n         product != \"gadgets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#more in examples\na <- c(1:5)\n\n#looks through and outcomes true or false\n6 %in% a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n1 %in% a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#to check if not in\nif(1 %in% a == TRUE){\n  \"yes\"\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"yes\"\n```\n:::\n\n```{.r .cell-code}\nif(6 %in% a == FALSE){\n  \"yes\"\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"yes\"\n```\n:::\n\n```{.r .cell-code}\n#default variable 'letters' prints out a-z\nletters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n:::\n\n```{.r .cell-code}\nLETTERS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n```\n:::\n\n```{.r .cell-code}\nwhich(letters %in% \"g\", arr.ind = TRUE) #where is index of letter\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n:::\n\n\n### arrange\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# arranging the table \n# first by product in alphabetical order\n# then by \"region\" in reverse alphabetical order\nbudget %>%\n  arrange(product, desc(region))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 West   gadgets       1204        426           433        -136 low     low    \n2 South  gadgets       2022       -945          -610         200 low     low    \n3 North  gadgets        723         77          1037        1115 very h… very h…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 South  widgets       1123      -1450          1004         672 high    neutral\n7 North  widgets       2129       -517           822        -897 high    very h…\n8 East   widgets       -728        -51          -801        -342 very l… very l…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n\n```{.r .cell-code}\nbudget %>%\n  mutate(region = factor(region, levels = c(\"North\", \"South\", \"East\", \"West\"))) %>%\n  filter(product == \"gadgets\") %>%\n  arrange(region)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <fct>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  gadgets        723         77          1037        1115 very h… very h…\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   gadgets       -423       -354            94        2036 neutral high   \n4 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n```\n:::\n:::\n\n\n### Mutate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget2 <- budget %>%\n  mutate(\n    sales = sales_2019 + sales_2020,\n    expenses = expenses_2019 + expenses_2020,\n    profit = sales - expenses,\n    region = paste(region, \"Office\")\n  )\n```\n:::\n\n\n### Mutate with Logic Operators\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget2 <- budget2 %>%\n  mutate(profit_category = profit > 0,\n         product = as.factor(product))\n```\n:::\n\n\n### Using case_when\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget3 <- budget2 %>%\n  mutate(profit_category = case_when(profit > 0 ~ \"PROFIT\",\n                                     profit < 0 ~ \"NO PROFIT\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a column where people get a bonus if customer satisfaction was overall high or very high\n\nbonus <- budget3 %>%\n  mutate(bonus_2019 = case_when(satisfaction_2019 %in% c(\"very low\", \"low\", \"neutral\") ~ \"no bonus\",\n                                satisfaction_2019 %in% c(\"high\", \"very high\") ~ \"bonus\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# new management takes over - people only get a bonus if customer satisfaction was overall high or very high AND if a profit was returned\n\nbonus2 <- budget3 %>%\n  mutate(bonus_2020 = case_when(satisfaction_2020 == \"high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                satisfaction_2020 == \"very high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                TRUE ~ \"No bonus\")) # set all other values to \"no bonus\"\n```\n:::\n\n\n### Summarise\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget4 <- budget %>%\n  select(-satisfaction_2019, -satisfaction_2020) %>%\n  pivot_longer(cols = sales_2019:expenses_2020,\n               names_to = c(\"type\", \"year\"),\n               names_sep = \"_\",\n               values_to = \"value\") %>%\n  pivot_wider(names_from = type,\n              values_from = value)\n\nhead(budget4) # check the format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 North  widgets 2020   -517     -897\n3 North  gadgets 2019    723     1037\n4 North  gadgets 2020     77     1115\n5 South  widgets 2019   1123     1004\n6 South  widgets 2020  -1450      672\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget4 %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390\n```\n:::\n:::\n\n\n### Group By\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear_prod <- budget4 %>%\n  group_by(year, product) %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  ) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nyear_prod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 6\n  year  product mean_sales mean_expenses min_profit max_profit\n  <chr> <chr>        <dbl>         <dbl>      <dbl>      <dbl>\n1 2019  gadgets       882.          238.      -2632        517\n2 2019  widgets       789.          452       -1307        150\n3 2020  gadgets      -199           804.       -562       2390\n4 2020  widgets      -307          -220.      -1105       2122\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# arrange by maximum profit\nyear_prod %>%\n  arrange(desc(max_profit))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 6\n  year  product mean_sales mean_expenses min_profit max_profit\n  <chr> <chr>        <dbl>         <dbl>      <dbl>      <dbl>\n1 2020  gadgets      -199           804.       -562       2390\n2 2020  widgets      -307          -220.      -1105       2122\n3 2019  gadgets       882.          238.      -2632        517\n4 2019  widgets       789.          452       -1307        150\n```\n:::\n\n```{.r .cell-code}\n# filter out gadgets\nyear_prod %>%\n  filter(product != \"gadgets\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  year  product mean_sales mean_expenses min_profit max_profit\n  <chr> <chr>        <dbl>         <dbl>      <dbl>      <dbl>\n1 2019  widgets       789.          452       -1307        150\n2 2020  widgets      -307          -220.      -1105       2122\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# return top 3 sales\nbudget4 %>%\n  slice_max(n = 3, order_by = sales)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 South  gadgets 2019   2022     -610\n3 West   gadgets 2019   1204      433\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# return top sale for each region\nbudget4 %>%\n  group_by(region) %>%\n  slice_max(n = 1, order_by = sales)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n# Groups:   region [4]\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 East   widgets 2020    -51     -342\n2 North  widgets 2019   2129      822\n3 South  gadgets 2019   2022     -610\n4 West   gadgets 2019   1204      433\n```\n:::\n:::\n\n\n### Rounding\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear_prod %>%\n  mutate(across(.cols = mean_sales:max_profit, \n                .fns = round))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 6\n  year  product mean_sales mean_expenses min_profit max_profit\n  <chr> <chr>        <dbl>         <dbl>      <dbl>      <dbl>\n1 2019  gadgets        882           238      -2632        517\n2 2019  widgets        789           452      -1307        150\n3 2020  gadgets       -199           804       -562       2390\n4 2020  widgets       -307          -220      -1105       2122\n```\n:::\n\n```{.r .cell-code}\nround(0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nround(1.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n#!!!!!! redefining round so 5s round up !!!!!! \nround <- function(x, digits = 0) {\n  posneg = sign(x)\n  z = abs(x)*10^digits\n  z = z + 0.5 + sqrt(.Machine$double.eps)\n  z = trunc(z)\n  z = z/10^digits\n  z*posneg\n}\n\nround(0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nround(1.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# remove new round() method\nrm(round)\n```\n:::\n\n\n### Missing Values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_bad <- budget4 %>%\n  mutate(expenses = ifelse(\n    test = year == 2020 & region == \"South\", \n    yes = 0, # value if above conditions are met\n    no = expenses # value if above conditions are not met\n  ))\n\n\nmissing_bad <- budget4 %>%\n  mutate(expenses = case_when(\n    # set to 0 when year is 2020 and region is North\n    year == 2020 & region == \"South\" ~ 0, \n    # otherwise, set to the value in the expenses column\n    TRUE ~ expenses   \n  ))\n\n# set sales values to \"missing\" for North 2020 rows\nmissing_bad <- missing_bad %>%\n  mutate(sales = ifelse(year == 2020 & region == \"North\", \n                        \"missing\", \n                        sales))\n\n# check structure of data, sales now character\nstr(missing_bad)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [16 × 5] (S3: tbl_df/tbl/data.frame)\n $ region  : chr [1:16] \"North\" \"North\" \"North\" \"North\" ...\n $ product : chr [1:16] \"widgets\" \"widgets\" \"gadgets\" \"gadgets\" ...\n $ year    : chr [1:16] \"2019\" \"2020\" \"2019\" \"2020\" ...\n $ sales   : chr [1:16] \"2129\" \"missing\" \"723\" \"missing\" ...\n $ expenses: num [1:16] 822 -897 1037 1115 1004 ...\n```\n:::\n\n```{.r .cell-code}\n# set sales values to \"missing\" for North 2020 rows\nmissing_bad <- missing_bad %>%\n  mutate(sales = as.character(sales),\n         sales = case_when(year == 2020 & region == \"North\" ~ \"missing\", \n                           TRUE ~ sales))\n\n\n# try to compute mean sales\nmissing_bad %>%\n  summarise(mean_sales = mean(sales))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `summarise()`.\nℹ In argument: `mean_sales = mean(sales)`.\nCaused by warning in `mean.default()`:\n! argument is not numeric or logical: returning NA\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_sales\n       <dbl>\n1         NA\n```\n:::\n:::\n\n\n### Convert missing to NA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_data <- missing_bad %>%\n  mutate(\n    # set \"0\" values to NA using ifelse\n    expenses = ifelse(expenses == 0, NA, expenses),\n    # set \"missing\" values to NA using case_when\n    sales = case_when(sales == \"missing\" ~ NA_character_,\n                      TRUE ~ sales),\n    # convert to numeric\n    sales = as.numeric(sales)\n  )\n\nmissing_data %>%\n  group_by(region) %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales),\n    .groups = \"drop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  region mean_sales mean_expenses min_profit max_profit\n  <chr>       <dbl>         <dbl>      <dbl>      <dbl>\n1 East        -389           247.       -291       2390\n2 North         NA           519.         NA         NA\n3 South        188.           NA          NA         NA\n4 West         763.          191.      -1105        150\n```\n:::\n\n```{.r .cell-code}\nmissing_data %>%\n  group_by(region) %>%\n  summarise(\n    mean_sales = mean(sales, na.rm = TRUE),\n    mean_expenses = mean(expenses, na.rm = TRUE),\n    min_profit = min(expenses - sales, na.rm = TRUE),\n    max_profit = max(expenses - sales, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  region mean_sales mean_expenses min_profit max_profit\n  <chr>       <dbl>         <dbl>      <dbl>      <dbl>\n1 East        -389           247.       -291       2390\n2 North       1426           519.      -1307        314\n3 South        188.          197       -2632       -119\n4 West         763.          191.      -1105        150\n```\n:::\n\n```{.r .cell-code}\nmissing_data %>%\n  group_by(year, product) %>%\n  summarise(\n    n_valid = sum(!is.na(sales)),\n    n_missing = sum(is.na(sales)),\n    prop_missing = mean(is.na(sales)),\n    .groups = \"drop\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  year  product n_valid n_missing prop_missing\n  <chr> <chr>     <int>     <int>        <dbl>\n1 2019  gadgets       4         0         0   \n2 2019  widgets       4         0         0   \n3 2020  gadgets       3         1         0.25\n4 2020  widgets       3         1         0.25\n```\n:::\n\n```{.r .cell-code}\n# remove any rows with any missing values\ncomplete_data <- missing_data %>%\n  drop_na()\n\n# remove any rows that are missing a value for sales\ncomplete_sales <- missing_data %>%\n  drop_na(sales)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 5\n   region product year  sales expenses\n   <chr>  <chr>   <chr> <dbl>    <dbl>\n 1 North  widgets 2019   2129      822\n 2 North  gadgets 2019    723     1037\n 3 South  widgets 2019   1123     1004\n 4 South  gadgets 2019   2022     -610\n 5 East   widgets 2019   -728     -801\n 6 East   widgets 2020    -51     -342\n 7 East   gadgets 2019   -423       94\n 8 East   gadgets 2020   -354     2036\n 9 West   widgets 2019    633      783\n10 West   widgets 2020    790     -315\n11 West   gadgets 2019   1204      433\n12 West   gadgets 2020    426     -136\n```\n:::\n\n```{.r .cell-code}\ncomplete_sales\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 5\n   region product year  sales expenses\n   <chr>  <chr>   <chr> <dbl>    <dbl>\n 1 North  widgets 2019   2129      822\n 2 North  gadgets 2019    723     1037\n 3 South  widgets 2019   1123     1004\n 4 South  widgets 2020  -1450       NA\n 5 South  gadgets 2019   2022     -610\n 6 South  gadgets 2020   -945       NA\n 7 East   widgets 2019   -728     -801\n 8 East   widgets 2020    -51     -342\n 9 East   gadgets 2019   -423       94\n10 East   gadgets 2020   -354     2036\n11 West   widgets 2019    633      783\n12 West   widgets 2020    790     -315\n13 West   gadgets 2019   1204      433\n14 West   gadgets 2020    426     -136\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
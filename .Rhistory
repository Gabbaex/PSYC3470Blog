years <- budget %>% select(sales_2019:satisfaction_2020)
years
# excluding colums using minus
# de-select individual columns
sales <- budget %>% select(-expenses_2019, -expenses_2020)
# de-select a range of columns
sales <- budget %>% select(-(expenses_2019:expenses_2020))
sales
# select all rows where region equals North
budget %>% filter(region == "North")
# select all rows where expenses_2020 were exactly equal to 200
budget %>% filter(expenses_2020 == 200)
# select all rows where sales_2019 was more than 100
budget %>% filter(sales_2019 > 100)
# everything but the North
budget %>% filter(region != "North")
# regions and products with profit in both 2019 and 2020
profit_both <- budget %>%
filter(
sales_2019 > expenses_2019,
sales_2020 > expenses_2020
)
# the same as above, using & instead of a comma
profit_both <- budget %>%
filter(
sales_2019 > expenses_2019 &
sales_2020 > expenses_2020
)
# regions and products with profit in 2019 or 2020
profit_either <- budget %>%
filter(
sales_2019 > expenses_2019 |
sales_2020 > expenses_2020
)
# 2020 profit greater than 1000
profit_1000 <- budget %>%
filter(sales_2020 - expenses_2020 > 1000)
# retain any rows where region is north or south, and where product equals widget
budget %>%
filter(region %in% c("North", "South"),
product == "widgets")
# retain any rows where the region is not east or west, and where the product does not equal gadgets
budget %>%
filter(!region %in% c("East", "West"),
product != "gadgets")
#more in examples
a <- c(1:5)
#looks through and outcomes true or false
6 %in% a
1 %in% a
#to check if not in
if(1 %in% a == TRUE){
"yes"
}
if(6 %in% a == FALSE){
"yes"
}
#default variable 'letters' prints out a-z
letters
LETTERS
which(letters %in% "g", arr.ind = TRUE) #where is index of letter
# arranging the table
# first by product in alphabetical order
# then by "region" in reverse alphabetical order
budget %>%
arrange(product, desc(region))
budget %>%
mutate(region = factor(region, levels = c("North", "South", "East", "West"))) %>%
filter(product == "gadgets") %>%
arrange(region)
budget2 <- budget %>%
mutate(
sales = sales_2019 + sales_2020,
expenses = expenses_2019 + expenses_2020,
profit = sales - expenses,
region = paste(region, "Office")
)
budget2 <- budget2 %>%
mutate(profit_category = profit > 0,
product = as.factor(product))
budget3 <- budget2 %>%
mutate(profit_category = case_when(profit > 0 ~ "PROFIT",
profit < 0 ~ "NO PROFIT"))
# create a column where people get a bonus if customer satisfaction was overall high or very high
bonus <- budget3 %>%
mutate(bonus_2019 = case_when(satisfaction_2019 %in% c("very low", "low", "neutral") ~ "no bonus",
satisfaction_2019 %in% c("high", "very high") ~ "bonus"))
# new management takes over - people only get a bonus if customer satisfaction was overall high or very high AND if a profit was returned
bonus2 <- budget3 %>%
mutate(bonus_2020 = case_when(satisfaction_2020 == "high" &
profit_category == "PROFIT" ~ "bonus",
satisfaction_2020 == "very high" &
profit_category == "PROFIT" ~ "bonus",
TRUE ~ "No bonus")) # set all other values to "no bonus"
budget4 <- budget %>%
select(-satisfaction_2019, -satisfaction_2020) %>%
pivot_longer(cols = sales_2019:expenses_2020,
names_to = c("type", "year"),
names_sep = "_",
values_to = "value") %>%
pivot_wider(names_from = type,
values_from = value)
head(budget4) # check the format
budget4 %>%
summarise(
mean_sales = mean(sales),
mean_expenses = mean(expenses),
min_profit = min(expenses - sales),
max_profit = max(expenses - sales)
)
year_prod <- budget4 %>%
group_by(year, product) %>%
summarise(
mean_sales = mean(sales),
mean_expenses = mean(expenses),
min_profit = min(expenses - sales),
max_profit = max(expenses - sales)
) %>%
ungroup()
year_prod
# arrange by maximum profit
year_prod %>%
arrange(desc(max_profit))
# filter out gadgets
year_prod %>%
filter(product != "gadgets")
# return top 3 sales
budget4 %>%
slice_max(n = 3, order_by = sales)
# return top sale for each region
budget4 %>%
group_by(region) %>%
slice_max(n = 1, order_by = sales)
year_prod %>%
mutate(across(.cols = mean_sales:max_profit,
.fns = round))
round(0.5)
round(1.5)
#!!!!!! redefining round so 5s round up !!!!!!
round <- function(x, digits = 0) {
posneg = sign(x)
z = abs(x)*10^digits
z = z + 0.5 + sqrt(.Machine$double.eps)
z = trunc(z)
z = z/10^digits
z*posneg
}
round(0.5)
round(1.5)
# remove new round() method
rm(round)
missing_bad <- budget4 %>%
mutate(expenses = ifelse(
test = year == 2020 & region == "South",
yes = 0, # value if above conditions are met
no = expenses # value if above conditions are not met
))
missing_bad <- budget4 %>%
mutate(expenses = case_when(
# set to 0 when year is 2020 and region is North
year == 2020 & region == "South" ~ 0,
# otherwise, set to the value in the expenses column
TRUE ~ expenses
))
# set sales values to "missing" for North 2020 rows
missing_bad <- missing_bad %>%
mutate(sales = ifelse(year == 2020 & region == "North",
"missing",
sales))
# check structure of data, sales now character
str(missing_bad)
# set sales values to "missing" for North 2020 rows
missing_bad <- missing_bad %>%
mutate(sales = as.character(sales),
sales = case_when(year == 2020 & region == "North" ~ "missing",
TRUE ~ sales))
# try to compute mean sales
missing_bad %>%
summarise(mean_sales = mean(sales))
missing_data <- missing_bad %>%
mutate(
# set "0" values to NA using ifelse
expenses = ifelse(expenses == 0, NA, expenses),
# set "missing" values to NA using case_when
sales = case_when(sales == "missing" ~ NA_character_,
TRUE ~ sales),
# convert to numeric
sales = as.numeric(sales)
)
missing_data %>%
group_by(region) %>%
summarise(
mean_sales = mean(sales),
mean_expenses = mean(expenses),
min_profit = min(expenses - sales),
max_profit = max(expenses - sales),
.groups = "drop")
missing_data %>%
group_by(region) %>%
summarise(
mean_sales = mean(sales, na.rm = TRUE),
mean_expenses = mean(expenses, na.rm = TRUE),
min_profit = min(expenses - sales, na.rm = TRUE),
max_profit = max(expenses - sales, na.rm = TRUE),
.groups = "drop"
)
missing_data %>%
group_by(year, product) %>%
summarise(
n_valid = sum(!is.na(sales)),
n_missing = sum(is.na(sales)),
prop_missing = mean(is.na(sales)),
.groups = "drop"
)
# remove any rows with any missing values
complete_data <- missing_data %>%
drop_na()
# remove any rows that are missing a value for sales
complete_sales <- missing_data %>%
drop_na(sales)
complete_data
complete_sales
install.packages("tidytuesdayR")
install.packages("Rtools")
tuesdata <- tidytuesdayR::tt_load('2023-05-02')
tuesdata <- tidytuesdayR::tt_load(2023, week = 18)
plots <- tuesdata$plots
species <- tuesdata$species
surveys <- tuesdata$surveys
# All packages used in this script:
library(portalr)
install.packages("portalr")
# All packages used in this script:
library(portalr)
library(dplyr)
download_observations(".")
data_tables <- load_rodent_data()
species_data <- data_tables[["species_table"]]
# All packages used in this script:
library(portalr)
library(dplyr)
download_observations(".")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
install.packages("plotly")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
install.packages("waffle")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
install.packages("ggbump")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(treemap)     # for treemap plots
install.packages("treemap")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(treemap)     # for treemap plots
install.packages("treemap")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(treemap)     # for treemap plots
install.packages("igraph")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(treemap)     # for treemap plots
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
install.packages("ggwordcloud")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
install.packages("tidytext")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
install.packages("sf")
install.packages("rnaturalearth")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
install.packages("sf")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
library(rnaturalearth) # for map data
install.packages("rnaturalearth")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
library(rnaturalearth) # for map data
library(rnaturalearthdata) # extra mapping data
install.packages("rnaturalearthdata")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
library(rnaturalearth) # for map data
library(rnaturalearthdata) # extra mapping data
library(gganimate)   # for animated plots
install.packages("gganimate")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
library(rnaturalearth) # for map data
library(rnaturalearthdata) # extra mapping data
library(gganimate)   # for animated plots
theme_set(theme_light())
# update column specification
ct <- cols(issue_category = col_factor(levels = c("tech", "returns", "sales", "other")))
# load data
survey_data <- read_csv(file = "data/survey_data.csv",
col_types = ct)
# create bar plot
bar <- ggplot(data = survey_data,
mapping = aes(x = issue_category,
fill = issue_category)) +
geom_bar(show.legend = FALSE) +
labs(x = "Issue Category",
y = "Count",
title = "Calls by Issue Category")
#create scatterplot
point <- ggplot(data = survey_data,
mapping = aes(x = wait_time,
y = call_time,
color = issue_category)) +
geom_point(alpha = 0.5) +
geom_smooth(method = lm, formula = y~x) +
labs(x = "Wait Time",
y = "Call Time",
color = "Issue Category",
title = "Wait Time by Call Time")
bar + point
bar +
# add left-justified text to the second bar
annotate(geom = "text",
label = "Our goal is to\nreduce this\ncategory",
x = 1.65, y = 150,
hjust = 0, vjust = 1,
color = "white", fontface = "bold",
angle = 45) +
# add a centred label to the third bar
annotate(geom = "label",
label = "Our goal is\nto increase this\ncategory",
x = 3, y = 75,
hjust = 0.5, vjust = 1,
color = " darkturquoise", fontface = "bold")
point +
# add a rectangle surrounding long call times
annotate(geom = "rect",
xmin = 100, xmax = 275,
ymin = 140, ymax = 180,
fill = "transparent", color = "red") +
# add a text label
annotate("text",
x = 260, y = 120,
label = "outliers") +
# add an line with an arrow from the text to the box
annotate(geom = "segment",
x = 240, y = 120,
xend = 200, yend = 135,
arrow = arrow(length = unit(0.5, "lines"))) +
# add a curved line with an arrow
# from the text to a wait time outlier
annotate(geom = "curve",
x = 280, y = 120,
xend = 320, yend = 45,
curvature = -0.5,
arrow = arrow(length = unit(0.5, "lines")))
survey_data <- read_csv(file = "data/survey_data.csv",
show_col_types = FALSE)
ggplot(survey_data, aes(x = wait_time)) +
geom_histogram()
ggplot(survey_data, aes(x = wait_time)) +
scale_x_continuous(name = "Wait time (seconds)",
breaks = seq(0, 600, 60)) +
geom_freqpoly(boundary = 0, binwidth = 15,
color = "black")
survey_data %>%
count(issue_category) %>%
ggplot(aes(fill = issue_category, values = n)) +
geom_waffle(
n_rows = 23, # try setting this to 10 (the default)
size = 0.33, # line size
make_proportional = FALSE, # use raw values
colour = "white", # line colour
flip = FALSE, # bottom-top or left-right
radius = grid::unit(0.1, "npc") # set to 0.5 for circles
) +
theme_enhance_waffle() + # gets rid of axes
scale_fill_colorblind(name = "Issue Category")
install.packages("tidytuesdayR")
install.packages("tidytuesdayR")
install.packages("tidytuesdayR")
install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2023-05-02')
tuesdata <- tidytuesdayR::tt_load(2023, week = 18)
plots <- tuesdata$plots
species <- tuesdata$species
surveys <- tuesdata$surveys
# All packages used in this script:
library(portalr)
library(dplyr)
download_observations(".")
data_tables <- load_rodent_data()
species_data <- data_tables[["species_table"]]
plots_data <- data_tables[["plots_table"]]
plot_treatments <- plots_data %>%
filter(year > 1977) |>
mutate(iso_date = as.Date(paste0(year, "-", month, "-", "01")),
plot = as.factor(plot)) %>%
select(iso_date, plot, treatment)
plots_data_longterm <- plot_treatments |>
group_by(plot) |>
summarize(treatment = case_when(
all(treatment == "control") ~ "control",
all(treatment == "exclosure") ~ "exclosure")) |>
filter(!is.na(treatment))
species_data <- species_data |>
filter(censustarget == 1, unidentified == 0)
survey_data <- summarize_individual_rodents(
time = "date",
length = "Longterm") |>
filter(year > 1977) |>
filter(species %in% unique(species_data$species))
write.csv(survey_data, "surveys.csv", row.names = FALSE, na = "")
write.csv(plots_data_longterm, "plots.csv", row.names = FALSE, na = "")
write.csv(species_data, "species.csv", row.names = FALSE, na = "")

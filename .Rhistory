friendly = TRUE,
numbers = c(1,2,3),
more_numbers = 1:3,
)
# print it
avatar
library(lubridate)
1 == 1
1 == 2
c(1, 2, 3) == c(2, 1, 3)
1 == c(2, 1, 3)
1 != 1
1 != 2
1 > 1
5 > 1
3 < 2
3 < 1
c(1, 2 ,3) > c(2, 1, 3)
1 >= 1
5 >= 1
3 <= 2
# is 16 divisible by 4 AND 8
16 %% 4 == 0 & 16 %% 8 == 0
16 %% 4 == 0 & 16 %% 3 == 0
16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0
16 %% 4 == 0 | 16 %% 8 == 0
a <- 1 # defines a to be a 1
if (a == 1) {
print(a) # this happens if a == 1
} else {
print("A is not 1") # this happens if a is not 1
}
a <- 1 # defines a to be a 1
if (a == 1) {
print(a) # this happens if a == 1
} else {
print("A is not 1") # this happens if a is not 1
}
else {
a <- 1 # defines a to be a 1
if (a == 1) {
print(a) # this happens if a == 1
} else {
print("A is not 1") # this happens if a is not 1
}
else {
a <- 1 # defines a to be a 1
if (a == 1) {
print(a) # this happens if a == 1
} else {
print("A is not 1") # this happens if a is not 1
}
if (a == 1) {
print(a)
} else {
print("Hello world")
rbinom(1, 1:10, 10)
}
a <- 1 # defines a to be a 1
if (a == 1) {
print(a) # this happens if a == 1
} else {
print("A is not 1") # this happens if a is not 1
}
if (a == 2) {
print(a)
} else {
print("Hello world")
rbinom(1, 1:10, 10)
}
?rbinom
a <- 1 # defines a to be a 1
if (a == 1) {
print(a) # this happens if a == 1
} else {
print("A is not 1") # this happens if a is not 1
}
if (a == 2) {
print(a)
} else {
print("Hello world")
rbinom(1:10, 10)
}
a <- 1 # defines a to be a 1
if (a == 1) {
print(a) # this happens if a == 1
} else {
print("A is not 1") # this happens if a is not 1
}
if (a == 2) {
print(a)
} else {
print("Hello world")
}
# for loop
a <- c(1, 0, 1, 0, 0, 1)
for (i in a) {
if (i == 1) {
print("I'm a 1")
} else {
print("I'm not a 1")
}
}
# for loop
a <- c(1, 0, 1, 0, 0, 0, 1)
for (i in a) {
if (i == 1) {
print("I'm a 1")
} else {
print("I'm not a 1")
}
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1 # adds one each step of loop
}
i <- 0
repeat {
i <- i + 1
print(i)
if (i == 5) {
break
}
}
i <- 2 print(i)
i <- 1 for (i in a) print(i)
library(tidyverse)
library(patchwork)
install.packages("patchwork")
library(tidyverse)
library(patchwork)
library(ggthemes)
library(lubridate)
a <- 2.5 # assigning character/variable
class(a)
type(a)
a <- 2.5 # assigning character/variable
class(a)
typeof(a)
a <- 2.5 # assigning character/variable
class(a) # find out it's numeric
typeof(a) # find out it's a double
is.integer(a)
a <- 2.5 # assigning character/variable
class(a) # find out it's numeric
typeof(a) # find out it's a double
is.integer(a) # find out it's not an integer
is.integer(aL)
a <- 2.5 # assigning character/variable
class(a) # find out it's numeric
typeof(a) # find out it's a double
is.integer(2.5) # find out it's not an integer
is.integer(2.5L)
a <- 2.5 # assigning character/variable
class(a) # find out it's numeric
typeof(a) # find out it's a double
is.integer(a) # find out it's not an integer (integers don't have decimals)
as.integer(2.5)
a <- 2.5 # assigning character/variable
class(a) # find out it's numeric
typeof(a) # find out it's a double
is.integer(a) # find out it's not an integer (integers don't have decimals)
as.integer(a)
a <- 2.5 # assigning character/variable
class(a) # find out it's numeric
typeof(a) # find out it's a double
is.integer(a) # find out it's not an integer (integers don't have decimals)
as.integer(a) # rounds (2.5) down to an integer (2)
integer(length = 5)
integer(length = 5)
numberic(length = 5)
integer(length = 5)
numeric(length = 5)
as.logical(a)
as.logical(0)
# logical/boolean
Typeof(TRUE)
# logical/boolean
typeof(TRUE)
# logical/boolean
typeof(TRUE)
class(TRUE)
is.logical(FALSE)
as.logical(1)
as.logical(0)
# logical/boolean
typeof(TRUE) # uppercase true makes logical variables
class(TRUE)
is.logical(FALSE) # same with uppercase false
as.logical(1)
as.logical(0)
# logical/boolean
typeof(TRUE) # uppercase true makes logical variables
class(TRUE)
is.logical(FALSE) # same with uppercase false
as.logical(1) # one will be seen as true
as.logical(0) # zero will be seen as false
logical(length = 3) # initializes logical vector three times
a <- 2.5 # assigning character/variable
class(a) # find out it's numeric
typeof(a) # find out it's a double
is.integer(a) # find out it's not an integer (integers don't have decimals)
as.integer(a) # rounds (2.5) down to an integer (2)
is.character(a)
library(tidyr)
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka"),
bends = c("water", "earth", NA),
friendly = TRUE,
numbers = c(1,2,3),
more_numbers = 1:3,
)
# print it
avatar
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)
numbers = c(1,2,3),
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
numbers = c(1,2,3),
more_numbers = 1:3,
)
View(avatar)
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
numbers = c(1,2,3,4,5,6,7),
more_numbers = 1:7,
)
# print it
avatar
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
tribe/nation = c("water tribe","earth","water tribe","fire nation","fire nation","earth","water tribe"),
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
tribe-nation = c("water tribe","earth","water tribe","fire nation","fire nation","earth","water tribe"),
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
tribe,nation = c("water tribe","earth","water tribe","fire nation","fire nation","earth","water tribe"),
more_numbers = 1:7,
)
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
tribe = c("water tribe","earth","water tribe","fire nation","fire nation","earth","water tribe"),
more_numbers = 1:7,
)
# print it
avatar
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
more_numbers = 1:7,
)
# print it
avatar
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
personal_rating = 7,10,5,8,2,10,6
)
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
personal_rating = c(7,10,5,8,2,10,6)
)
# print it
avatar
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
personal_rating = c(7,10,5,8,2,10,6)
)
library(tidyr)
avatar <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
personal_rating = c(7,10,5,8,2,10,6)
)
avatar
library(tidyr)
atla <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
personal_rating = c(7,10,5,8,2,10,6)
)
atla # tibble name prints table
library(tidyr)
atla <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
personal_rating = c(7,10,5,8,2,10,6)
)
atla # tibble name prints table
tidyr::as_tibble(atla)
library(tidyr)
atla <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
personal_rating = c(7,10,5,8,2,10,6) # out of ten
)
atla # tibble name prints table
tidyr::as_tibble(atla)
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv")
ggplot()
ggplot()
library(tidyverse)
library(patchwork)
library(ggthemes)
library(lubridate)
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv")
ggplot()
ggplot(data = survey_data, mapping = aes(x = wait_time, y = satisfaction))
ggplot(survey_data, aes(x = wait_time, y = satisfaction)) + geom_point(color="red", shape=18, size = 5) + geom_point(color="black", shape=18, size = 3) + geom_smooth(method = "lm", color="green")
ggplot(survey_data, aes(x = wait_time, y = satisfaction, color = wait_time, size = satisfaction)) + geom_point()
min(survey_data$wait_time)
max(survey_data$wait_time)
length(survey_data$wait_time)
ggplot(data=survey_data, mapping= aes(x=wait_time)) + geom_histogram(bins=50, color="orange")
ggplot()
ggplot(data = survey_data, mapping = aes(x = wait_time, y = satisfaction))
ggplot(survey_data, aes(x = wait_time, y = satisfaction)) + geom_point(color="red", shape=18, size = 5) + geom_point(color="black", shape=18, size = 3) + geom_smooth(method = "lm", color="green")
ggplot(survey_data, aes(x = wait_time, y = satisfaction, color = wait_time, size = satisfaction)) + geom_point()
min(survey_data$wait_time)
max(survey_data$wait_time)
length(survey_data$wait_time)
ggplot(data=survey_data, mapping= aes(x=wait_time)) + geom_histogram(bins=50, color="orange")
ggplot(survey_data, aes(x = wait_time, y = satisfaction)) + geom_point(color="red", shape=18, size = 5) + geom_point(color="black", shape=18, size = 3) + geom_smooth(method = "lm", color="green")
#| fig-width: 75%
ggplot(survey_data, aes(x = wait_time, y = satisfaction)) + geom_point(color="red", shape=18, size = 5) + geom_point(color="black", shape=18, size = 3) + geom_smooth(method = "lm", color="green")
#| fig-width: 20%
ggplot(survey_data, aes(x = wait_time, y = satisfaction)) + geom_point(color="red", shape=18, size = 5) + geom_point(color="black", shape=18, size = 3) + geom_smooth(method = "lm", color="green")
ggplot(survey_data, aes(x = wait_time, y = satisfaction)) + geom_point(color="red", shape=18, size = 5) + geom_point(color="black", shape=18, size = 3) + geom_smooth(method = "lm", color="green")
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv")
spec(show_col_types = FALSE)
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv")
show_col_types = FALSE
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv")
`show_col_types = FALSE`
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv")
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv")
read_csv(show_col_types = FALSE)
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv", show_col_types = FALSE)
survey_data <- read_csv("https://psyteachr.github.io/ads-v2/data/survey_data.csv", show_col_types = FALSE)
ggplot(survey_data, aes(x = wait_time, y = satisfaction, color = wait_time, size = satisfaction)) + geom_point()
min(survey_data$wait_time)
max(survey_data$wait_time)
length(survey_data$wait_time)
ggplot(data=survey_data, mapping= aes(x=wait_time)) + geom_histogram(bins=50, color="orange")
library(tidyverse)
library(patchwork)
library(ggthemes)
library(lubridate)
# tidy data have every column a variable, every row a observation, and every cell a single value
library(tidyr)
atla <- tibble(
name = c("Katara", "Toph", "Sokka", "Zuko", "Azula", "Suki", "Princess Yue"),
bends = c("water", "earth", NA, "fire", "fire", NA, "water"),
friendly = c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE),
nation = c("water tribe","earth kingdom","water tribe","fire nation","fire nation","earth kingdom","water tribe"),
personal_rating = c(7,10,5,8,2,10,6) # out of ten
)
atla # tibble name prints table
tidyr::as_tibble(atla)
library(tidyverse)   # data wrangling functions
library(rtweet)      # for searching tweets
a <- load("ncod_tweets.rds")
readRDS("ncod_tweets.rds")
tweets <- readRDS("ncod_tweets.rds")
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
summary(tweets)
View(tweets)
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count)
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
library(dplyr)
filtered_data <- tweets
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
library(dplyr)
filtered_data <- tweets %>%
filter(favorite_count < 100) # thingy called pipe operator, sends data into next step aka filter
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
library(dplyr)
filtered_data <- tweets %>%
filter(favorite_count < 100) # thingy called pipe operator, sends data into next step aka filter
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
library(dplyr)
filtered_data <- tweets %>%
filter(favorite_count < 100) # thingy called pipe operator, sends data into next step aka filter
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count))
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count))
favourite_summary
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count)),
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count),
mean_RTs = mean(retweet_count),
median_RTs = median(retweet_count),
min_RTs = min(retweet_count),
max_RTs = max(retweet_count))
favourite_summary
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count),
sd_favs = sd(favorite_count),
mean_RTs = mean(retweet_count),
median_RTs = median(retweet_count),
min_RTs = min(retweet_count),
max_RTs = max(retweet_count),
sd_RTs = sd(favorite_count))
favourite_summary
ggplot(tweets, aes(x = favorite_count)) +
geom_histogram(bins = 25) +
scale_x_continuous(trans = "pseudo_log",
breaks = c(0, 1, 10, 100, 1000, 10000))
tweet_summary <- tweets %>%
summarise(mean_favs = mean(favorite_count),
median_favs = quantile(favorite_count, .5),
n = n(),
min_date = min(created_at),
max_date = max(created_at))
glimpse(tweet_summary)
date_from <- tweet_summary$min_date %>% # inline code
format("%d %B, %Y")
date_to <- tweet_summary$max_date %>%
format("%d %B, %Y")
date_from <- tweet_summary$min_date %>% # inline code
format("%d %B, %Y")
date_to <- tweet_summary$max_date %>%
format("%d %B, %Y")

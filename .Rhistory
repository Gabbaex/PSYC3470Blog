names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice, # the column to split
into = c("items", "price_per_item"), # the new columns to create
sep = " ", # split col by space
remove = TRUE, # whether to remove to old col
convert = TRUE # whether to fix the data type of the new columns
)
View(split_data)
View(wider_data)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice, # the column to split
into = c("items", "price_per_item"), # the new columns to create
sep = " ", # split col by space
remove = TRUE, # whether to remove to old col
convert = TRUE # whether to fix the data type of the new columns
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice, # the column to split
into = c("items", "price_per_item"), # the new columns to create
sep = " ", # split col by space
remove = TRUE, # whether to remove to old col
convert = TRUE # whether to fix the data type of the new columns
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
# check the data types
glimpse(mutated_data)
tidy_data <- type_convert(
df = mutated_data,
trim_ws = TRUE # removes spaces before and after values
)
# check the data types
glimpse(tidy_data)
untidy_data <- read_csv("data/untidy_data.csv",
show_col_types = FALSE)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020,
names_to = c("category", "year"),
names_sep = "_",
values_to = "value",
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice,
into = c("items", "price_per_item"),
sep = " ",
remove = TRUE,
convert = TRUE
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
tidy_data <- type_convert(
df = mutated_data,
trim_ws = TRUE
)
View(tidy_data)
library(tidyverse) # for data wrangling
untidy_data <- read_csv("data/untidy_data.csv", show_col_types = FALSE)
tidy_data <- read_csv("data/tidy_data.csv", show_col_types = FALSE)
knitr::kable(tidy_data)
knitr::kable(untidy_data)
tidy_data %>%
group_by(customer_id) %>%
summarise(
total_items = sum(items),
total_price = sum(totalprice)
)
# select just the customer ID and 3 total price columns
wide_totalprice <- select( #select allows to pick certain columns
.data = untidy_data,
customer_id,
`2018` = totalprice_2018,
`2019` = totalprice_2019,
`2020` = totalprice_2020
)
long_totalprice <- pivot_longer(
data = wide_totalprice,
cols = `2018`:`2020`,
names_to = "year",
values_to = "totalprice")
untidy_data[,c(1,5:7)]
ggplot(long_totalprice, aes(x = totalprice, fill = year)) +
geom_histogram(binwidth = 10, color = "black")
wide_by_customer <- pivot_wider(
data = long_totalprice,
id_cols = year, # identifying column(s)
names_from = customer_id, # the new column names
names_prefix = "C_", # prefix for new column names
values_from = totalprice # the new column values
)
wide_by_year <- pivot_wider(
data = long_totalprice,
id_cols = customer_id, # identifying column(s)
names_from = year, # the new column names
values_from = totalprice # the new column values
)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice, # the column to split
into = c("items", "price_per_item"), # the new columns to create
sep = " ", # split col by space
remove = TRUE, # whether to remove to old col
convert = TRUE # whether to fix the data type of the new columns
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
# check the data types
glimpse(mutated_data)
tidy_data <- type_convert(
df = mutated_data,
trim_ws = TRUE # removes spaces before and after values
)
# check the data types
glimpse(tidy_data)
untidy_data <- read_csv("data/untidy_data.csv",
show_col_types = FALSE)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020,
names_to = c("category", "year"),
names_sep = "_",
values_to = "value",
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice,
into = c("items", "price_per_item"),
sep = " ",
remove = TRUE,
convert = TRUE
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
tidy_data <- type_convert(
df = mutated_data,
trim_ws = TRUE
)
tidy_data <- read_csv(file = "data/untidy_data.csv",
show_col_types = FALSE) %>%
pivot_longer(
cols = itemsprice_2018:totalprice_2020,
names_to = c("category", "year"),
names_sep = "_",
values_to = "value",
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
) %>%
pivot_wider(
id_cols = c(customer_id, year),
names_from = category,
values_from = value
) %>%
separate(
col = itemsprice,
into = c("items", "price_per_item"),
sep = " ",
remove = TRUE,
convert = TRUE
) %>%
mutate(
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
) %>%
type_convert(
trim_ws = TRUE
)
tidy_data <- read_csv(file = "data/untidy_data.csv",
show_col_types = FALSE) %>%
pivot_longer(
cols = itemsprice_2018:totalprice_2020,
names_to = c("category", "year"),
names_sep = "_",
values_to = "value",
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
) %>%
pivot_wider(
id_cols = c(customer_id, year),
names_from = category,
values_from = value
) %>%
separate(
col = itemsprice,
into = c("items", "price_per_item"),
sep = " ",
remove = TRUE,
convert = TRUE
) %>%
mutate(
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
) %>%
type_convert(
trim_ws = TRUE
)
tidy_data
library(dplyr)
library(dplyr)
library(tidyverse)
budget <- read_csv("data/budget.csv", show_col_types = FALSE)
budget <- read_csv("data/budget.csv", show_col_types = FALSE)
view(budget)
# select single column by name, uses pipe operator
product_dat <- budget %>% select(product)
# select single column by number
product_dat <- budget %>% select(2)
product_dat <- budget %>% select(2,3)
View(product_dat)
# to print column 2 n 3 - not assigned so prints default
budget %>% select(2,3)
# to print column 2 n 3 - not assigned so prints by default
budget %>% select(2,3)
#can also type name of variable to print
product_dat
# to print column 2 n 3 - not assigned so prints by default
budget %>% select(2,3)
#can also type name of variable to print
product_dat
knitr::kable(product_dat)
# to print column 2 n 3 - not assigned so prints by default
budget %>% select(2,3)
#can also type name of variable to print
product_dat
#will look better rendered w html
knitr::kable(product_dat)
# select columns individually
sales2019 <- budget %>% select(region, product, sales_2019)
# select columns with colon
sales2019 <- budget %>% select(region:sales_2019)
#select columns w colon
years <- budget %>% select(3:7)
years <- budget %>% select(sales_2019:satisfaction_2020)
# select columns individually
sales2019 <- budget %>% select(region, product, sales_2019)
# select columns with colon
sales2019 <- budget %>% select(region:sales_2019)
#select columns w colon
years <- budget %>% select(3:7)
years <- budget %>% select(sales_2019:satisfaction_2020)
years
# select columns individually
sales2019 <- budget %>% select(region, product, sales_2019)
# select columns with colon
sales2019 <- budget %>% select(region:sales_2019)
#select columns w colon
years <- budget %>% select(3:7)
years <- budget %>% select(sales_2019:satisfaction_2020)
years
# excluding colums using minus
# de-select individual columns
sales <- budget %>% select(-expenses_2019, -expenses_2020)
# de-select a range of columns
sales <- budget %>% select(-(expenses_2019:expenses_2020))
sales
# select all rows where region equals North
budget %>% filter(region == "North")
# select all rows where expenses_2020 were exactly equal to 200
budget %>% filter(expenses_2020 == 200)
# select all rows where sales_2019 was more than 100
budget %>% filter(sales_2019 > 100)
# everything but the North
budget %>% filter(region != "North")
# regions and products with profit in both 2019 and 2020
profit_both <- budget %>%
filter(
sales_2019 > expenses_2019,
sales_2020 > expenses_2020
)
# the same as above, using & instead of a comma
profit_both <- budget %>%
filter(
sales_2019 > expenses_2019 &
sales_2020 > expenses_2020
)
# regions and products with profit in 2019 or 2020
profit_either <- budget %>%
filter(
sales_2019 > expenses_2019 |
sales_2020 > expenses_2020
)
# 2020 profit greater than 1000
profit_1000 <- budget %>%
filter(sales_2020 - expenses_2020 > 1000)
# retain any rows where region is north or south, and where product equals widget
budget %>%
filter(region %in% c("North", "South"),
product == "widgets")
# retain any rows where the region is not east or west, and where the product does not equal gadgets
budget %>%
filter(!region %in% c("East", "West"),
product != "gadgets")
#more in examples
a <- c(1:5)
6 %in% a
#more in examples
a <- c(1:5)
#looks through and outcomes true or false
6 %in% a
1 %in% a
#more in examples
a <- c(1:5)
#looks through and outcomes true or false
6 %in% a
1 %in% a
#to check if not in
if(1 %in% a == TRUE){
"yes"
}
#more in examples
a <- c(1:5)
#looks through and outcomes true or false
6 %in% a
1 %in% a
#to check if not in
if(1 %in% a == TRUE){
"yes"
}
if(6 %in% a == FALSE){
"yes"
}
#more in examples
a <- c(1:5)
#looks through and outcomes true or false
6 %in% a
1 %in% a
#to check if not in
if(1 %in% a == TRUE){
"yes"
}
if(6 %in% a == FALSE){
"yes"
}
#default variable 'letters' prints out a-z
letters
#more in examples
a <- c(1:5)
#looks through and outcomes true or false
6 %in% a
1 %in% a
#to check if not in
if(1 %in% a == TRUE){
"yes"
}
if(6 %in% a == FALSE){
"yes"
}
#default variable 'letters' prints out a-z
letters
LETTERS
#more in examples
a <- c(1:5)
#looks through and outcomes true or false
6 %in% a
1 %in% a
#to check if not in
if(1 %in% a == TRUE){
"yes"
}
if(6 %in% a == FALSE){
"yes"
}
#default variable 'letters' prints out a-z
letters
LETTERS
which(letters %in% "g", arr.ind = TRUE)
# arranging the table
# first by product in alphabetical order
# then by "region" in reverse alphabetical order
budget %>%
arrange(product, desc(region))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)

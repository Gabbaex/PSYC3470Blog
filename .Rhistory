theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"), plot.background = element_rect(fill = "lightgrey"), legend.position = "bottom", legend.background = element_rect(fill = "lightgrey"))
#| label: tbl-verified descriptives
#| tbl-cap: Average ratings by purchase status
#get mean and median ratings by verified users
verified_descriptives <- review_data %>%
group_by(verified) %>%
summarize(`Mean rating` = round(mean(rating), digits = 2),
`Median rating` = median(rating))
#print table
knitr::kable(verified_descriptives)
year_rating_status <- review_data %>%
group_by(year, verified) %>%
summarise(mean_rating = mean(rating), .groups = 'drop')
ggplot(data = year_rating_status,
mapping = aes(x=year, y=mean_rating, color = verified))+
geom_point(aes())+
geom_line()+
scale_color_manual(values = c('#1b9e77','#d95f02'))+
scale_x_continuous(breaks = 1999:2018)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust =1))+
xlab("")+ylab("")+
ggtitle(label = "Average Ratings", subtitle = "By year and purchase status")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"), plot.background = element_rect(fill = "lightgrey"), legend.position = "bottom", legend.background = element_rect(fill = "lightgrey"))
library(tidyverse) # for data wrangling
untidy_data <- read_csv("data/untidy_data.csv", show_col_types = FALSE)
tidy_data <- read_csv("data/tidy_data.csv", show_col_types = FALSE)
knitr::kable(tidy_data)
knitr::kable(untidy_data)
tidy_data %>%
group_by(customer_id) %>%
summarise(
total_items = sum(items),
total_price = sum(totalprice)
)
library(tidyverse) # for data wrangling
untidy_data <- read_csv("data/untidy_data.csv", show_col_types = FALSE)
tidy_data <- read_csv("data/tidy_data.csv", show_col_types = FALSE)
knitr::kable(tidy_data)
knitr::kable(untidy_data)
tidy_data %>%
group_by(customer_id) %>%
summarise(
total_items = sum(items),
total_price = sum(totalprice)
)
# select just the customer ID and 3 total price columns
wide_totalprice <- select(
.data = untidy_data,
customer_id,
`2018` = totalprice_2018,
`2019` = totalprice_2019,
`2020` = totalprice_2020
)
# select just the customer ID and 3 total price columns
wide_totalprice <- select(
.data = untidy_data,
customer_id,
`2018` = totalprice_2018,
`2019` = totalprice_2019,
`2020` = totalprice_2020
)
long_totalprice <- pivot_longer(
data = wide_totalprice,
cols = `2018`:`2020`,
names_to = "year",
values_to = "totalprice")
# select just the customer ID and 3 total price columns
wide_totalprice <- select(
.data = untidy_data,
customer_id,
`2018` = totalprice_2018,
`2019` = totalprice_2019,
`2020` = totalprice_2020
)
long_totalprice <- pivot_longer(
data = wide_totalprice,
cols = `2018`:`2020`,
names_to = "year",
values_to = "totalprice")
untidy_data[,c(1,1,1)]
# select just the customer ID and 3 total price columns
wide_totalprice <- select(
.data = untidy_data,
customer_id,
`2018` = totalprice_2018,
`2019` = totalprice_2019,
`2020` = totalprice_2020
)
long_totalprice <- pivot_longer(
data = wide_totalprice,
cols = `2018`:`2020`,
names_to = "year",
values_to = "totalprice")
untidy_data[,c(1,5,6,7)]
# select just the customer ID and 3 total price columns
wide_totalprice <- select(
.data = untidy_data,
customer_id,
`2018` = totalprice_2018,
`2019` = totalprice_2019,
`2020` = totalprice_2020
)
long_totalprice <- pivot_longer(
data = wide_totalprice,
cols = `2018`:`2020`,
names_to = "year",
values_to = "totalprice")
untidy_data[,c(1,5:7)]
ggplot(long_totalprice, aes(x = totalprice, fill = year)) +
geom_histogram(binwidth = 10, color = "black")
wide_by_customer <- pivot_wider(
data = long_totalprice,
id_cols = year, # identifying column(s)
names_from = customer_id, # the new column names
names_prefix = "C_", # prefix for new column names
values_from = totalprice # the new column values
)
wide_by_customer <- pivot_wider(
data = long_totalprice,
id_cols = year, # identifying column(s)
names_from = customer_id, # the new column names
names_prefix = "C_", # prefix for new column names
values_from = totalprice # the new column values
)
wide_by_year <- pivot_wider(
data = long_totalprice,
id_cols = customer_id, # identifying column(s)
names_from = year, # the new column names
names_prefix = "C_", # prefix for new column names
values_from = totalprice # the new column values
)
View(wide_by_customer)
View(wide_by_year)
wide_by_customer <- pivot_wider(
data = long_totalprice,
id_cols = year, # identifying column(s)
names_from = customer_id, # the new column names
names_prefix = "C_", # prefix for new column names
values_from = totalprice # the new column values
)
wide_by_year <- pivot_wider(
data = long_totalprice,
id_cols = customer_id, # identifying column(s)
names_from = year, # the new column names
names_prefix = "#_", # prefix for new column names
values_from = totalprice # the new column values
)
View(wide_by_year)
wide_by_customer <- pivot_wider(
data = long_totalprice,
id_cols = year, # identifying column(s)
names_from = customer_id, # the new column names
names_prefix = "C_", # prefix for new column names
values_from = totalprice # the new column values
)
wide_by_year <- pivot_wider(
data = long_totalprice,
id_cols = customer_id, # identifying column(s)
names_from = year, # the new column names
values_from = totalprice # the new column values
)
View(wide_by_year)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice, # the column to split
into = c("items", "price_per_item"), # the new columns to create
sep = " ", # split col by space
remove = TRUE, # whether to remove to old col
convert = TRUE # whether to fix the data type of the new columns
)
View(split_data)
View(wider_data)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice, # the column to split
into = c("items", "price_per_item"), # the new columns to create
sep = " ", # split col by space
remove = TRUE, # whether to remove to old col
convert = TRUE # whether to fix the data type of the new columns
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice, # the column to split
into = c("items", "price_per_item"), # the new columns to create
sep = " ", # split col by space
remove = TRUE, # whether to remove to old col
convert = TRUE # whether to fix the data type of the new columns
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
# check the data types
glimpse(mutated_data)
tidy_data <- type_convert(
df = mutated_data,
trim_ws = TRUE # removes spaces before and after values
)
# check the data types
glimpse(tidy_data)
untidy_data <- read_csv("data/untidy_data.csv",
show_col_types = FALSE)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020,
names_to = c("category", "year"),
names_sep = "_",
values_to = "value",
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice,
into = c("items", "price_per_item"),
sep = " ",
remove = TRUE,
convert = TRUE
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
tidy_data <- type_convert(
df = mutated_data,
trim_ws = TRUE
)
View(tidy_data)
library(tidyverse) # for data wrangling
untidy_data <- read_csv("data/untidy_data.csv", show_col_types = FALSE)
tidy_data <- read_csv("data/tidy_data.csv", show_col_types = FALSE)
knitr::kable(tidy_data)
knitr::kable(untidy_data)
tidy_data %>%
group_by(customer_id) %>%
summarise(
total_items = sum(items),
total_price = sum(totalprice)
)
# select just the customer ID and 3 total price columns
wide_totalprice <- select( #select allows to pick certain columns
.data = untidy_data,
customer_id,
`2018` = totalprice_2018,
`2019` = totalprice_2019,
`2020` = totalprice_2020
)
long_totalprice <- pivot_longer(
data = wide_totalprice,
cols = `2018`:`2020`,
names_to = "year",
values_to = "totalprice")
untidy_data[,c(1,5:7)]
ggplot(long_totalprice, aes(x = totalprice, fill = year)) +
geom_histogram(binwidth = 10, color = "black")
wide_by_customer <- pivot_wider(
data = long_totalprice,
id_cols = year, # identifying column(s)
names_from = customer_id, # the new column names
names_prefix = "C_", # prefix for new column names
values_from = totalprice # the new column values
)
wide_by_year <- pivot_wider(
data = long_totalprice,
id_cols = customer_id, # identifying column(s)
names_from = year, # the new column names
values_from = totalprice # the new column values
)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020, # columns to make long
names_to = c("category", "year"), # new column names for cols
names_sep = "_", # how to split cols into new columns
# names_pattern = "(.*)_(.*)", # alternative to names_sep
values_to = "value", # new column name for values
# make sure new columns are the right data type
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice, # the column to split
into = c("items", "price_per_item"), # the new columns to create
sep = " ", # split col by space
remove = TRUE, # whether to remove to old col
convert = TRUE # whether to fix the data type of the new columns
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
# check the data types
glimpse(mutated_data)
tidy_data <- type_convert(
df = mutated_data,
trim_ws = TRUE # removes spaces before and after values
)
# check the data types
glimpse(tidy_data)
untidy_data <- read_csv("data/untidy_data.csv",
show_col_types = FALSE)
longer_data <- pivot_longer(
data = untidy_data,
cols = itemsprice_2018:totalprice_2020,
names_to = c("category", "year"),
names_sep = "_",
values_to = "value",
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
)
wider_data <- pivot_wider(
data = longer_data,
id_cols = c(customer_id, year),
names_from = category,
values_from = value
)
split_data <- separate(
data = wider_data,
col = itemsprice,
into = c("items", "price_per_item"),
sep = " ",
remove = TRUE,
convert = TRUE
)
mutated_data <- mutate(
.data = split_data,
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
)
tidy_data <- type_convert(
df = mutated_data,
trim_ws = TRUE
)
tidy_data <- read_csv(file = "data/untidy_data.csv",
show_col_types = FALSE) %>%
pivot_longer(
cols = itemsprice_2018:totalprice_2020,
names_to = c("category", "year"),
names_sep = "_",
values_to = "value",
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
) %>%
pivot_wider(
id_cols = c(customer_id, year),
names_from = category,
values_from = value
) %>%
separate(
col = itemsprice,
into = c("items", "price_per_item"),
sep = " ",
remove = TRUE,
convert = TRUE
) %>%
mutate(
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
) %>%
type_convert(
trim_ws = TRUE
)
tidy_data <- read_csv(file = "data/untidy_data.csv",
show_col_types = FALSE) %>%
pivot_longer(
cols = itemsprice_2018:totalprice_2020,
names_to = c("category", "year"),
names_sep = "_",
values_to = "value",
names_transform = list(year = as.integer),
values_transform = list(value = as.character)
) %>%
pivot_wider(
id_cols = c(customer_id, year),
names_from = category,
values_from = value
) %>%
separate(
col = itemsprice,
into = c("items", "price_per_item"),
sep = " ",
remove = TRUE,
convert = TRUE
) %>%
mutate(
price_per_item = stringr::str_replace_all(
string = price_per_item,
pattern = "[()]",
replacement = ""
)
) %>%
type_convert(
trim_ws = TRUE
)
tidy_data

scale_x_continuous()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust =1))+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
scale_x_continuous()+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
scale_y_continuous(breaks = 0:300000)+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
scale_y_continuous(limits = 0,300000)+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
scale_y_continuous(limits = NA)+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
scale_y_continuous(breaks = NULL)+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
scale_y_continuous()+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
scale_y_continuous(options(scipen))+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
options(scipen)+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_rating <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_rating, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
options=scipen+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_verified_counts <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_verified_counts, mapping = aes(x=rating, y=counts))+
geom_bar(stat = "identity", fill = "white", color = "black")+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_verified_counts <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_verified_counts, mapping = aes(x=rating, y=counts, fill=rating))+
geom_bar(stat = "identity", fill = "white", color = "black")+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_verified_counts <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_verified_counts, mapping = aes(x=rating, y=counts, fill = rating))+
geom_bar(stat = "identity")+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_verified_counts <- review_data %>%
group_by(rating) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_verified_counts, mapping = aes(x=rating, y=counts, fill = verified))+
geom_bar(stat = "identity")+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_verified_counts <- review_data %>%
group_by(verified) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_verified_counts, mapping = aes(x=rating, y=counts, fill = verified))+
geom_bar(stat = "identity")+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
#get number of reviews per rating
review_by_verified_counts <- review_data %>%
group_by(verified) %>%
summarize(counts = n())
#plot, aes sets up mapping X.Y,
ggplot(data = review_by_verified_counts, mapping = aes(x=rating, y=counts, group = verified, fill = verified))+
geom_bar(stat = "identity", position = "dodge")+
xlab("")+ylab("")+
ggtitle(label = "Review ratings", subtitle = "Number of Reviews for each rating")+
theme(panel.grid.major=element_line(color = "darkgrey"), panel.grid.minor=element_line(color = "lightgrey"), panel.background = element_rect(fill = "lightgrey"))
library(tidyverse)
library(tidyverse)
customers <- tibble(
id = 1:5,
city = c("Port Ellen", "Dufftown", NA, "Aberlour", "Tobermory"),
postcode = c("PA42 7DU", "AB55 4DH", NA, "AB38 7RY", "PA75 6NR")
)
orders <- tibble(
id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
orders_B <- tibble(
id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
# adds new column
orders_B %>%
mutate(satisfaction = NA)
# adds multiple new column
orders_B %>%
mutate(satisfaction = NA,
numbers = 1:9)
# have to assign back to tibble to update
orders_B <- orders_B %>%
mutate(satisfaction = NA,
numbers = 1:9)
orders_B %>%
mutate(numbers_as_strings = as.character(numbers))
# math operation on columns
orders_B %>%
mutate(items_minus_id = items - id)
full_data <- full_join(customers, orders, by = "id")
full_data
# if row have number greater than 10, filters
full_data %>%
filter(items > 10) # column name w/ logical comparison
full_data %>%
filter(postcode == "AB38 7RY")
# filter uses & to show both post code with items greater
full_data %>%
filter(postcode == "AB38 7RY" & items > 21)
# set the number of dice rolls
num_rolls <- 100
# simulate rolling a six-sided dice
dice_rolls <- sample(1:6, num_rolls, replace = TRUE)
# print the results
print(dice_rolls)
# define the game board
board <- c(0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
# define the starting positions for the players
player1_pos <- 0
player2_pos <- 0
# simulate rolling the dice
roll_dice <- function() {
sample(1:6, 1, replace = TRUE)
}
# simulate playing the game
play_game <- function() {
while (player1_pos < 100 & player2_pos < 100) {
# player 1's turn
player1_roll <- roll_dice()
player1_pos <- player1_pos + player1_roll
if (player1_pos > 100) {
player1_pos <- 100 - (player1_pos - 100)
}
player1_pos <- player1_pos + board[player1_pos]
if (player1_pos < 0) {
player1_pos <- 0
}
if (player1_pos == 100) {
return("Player 1 wins!")
}
# player 2's turn
player2_roll <- roll_dice()
player2_pos <- player2_pos + player2_roll
if (player2_pos > 100) {
player2_pos <- 100 - (player2_pos - 100)
}
player2_pos <- player2_pos + board[player2_pos]
if (player2_pos < 0) {
player2_pos <- 0
}
if (player2_pos == 100) {
return("Player 2 wins!")
}
}
return("Game over.")
}
# play the game
play_game()
# define the game board
board <- c(0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
# define the starting positions for the players
player1_pos <- 0
player2_pos <- 0
# simulate rolling the dice
roll_dice <- function() {
sample(1:6, 1, replace = TRUE)
}
# simulate playing the game
play_game <- function() {
while (player1_pos < 100 & player2_pos < 100) {
# player 1's turn
player1_roll <- roll_dice()
player1_pos <- player1_pos + player1_roll
if (player1_pos > 100) {
player1_pos <- 100 - (player1_pos - 100)
}
player1_pos <- player1_pos + board[player1_pos]
if (player1_pos < 0) {
player1_pos <- 0
}
if (player1_pos == 100) {
return("Player 1 wins!")
}
if (!is.na(player1_pos) & player1_pos < 0) {
player1_pos <- 0
}
# player 2's turn
player2_roll <- roll_dice()
player2_pos <- player2_pos + player2_roll
if (player2_pos > 100) {
player2_pos <- 100 - (player2_pos - 100)
}
player2_pos <- player2_pos + board[player2_pos]
if (player2_pos < 0) {
player2_pos <- 0
}
if (player2_pos == 100) {
return("Player 2 wins!")
}
}
return("Game over.")
}
# play the game
play_game()
# define the game board
board <- c(0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
# define the starting positions for the players
player1_pos <- 0
player2_pos <- 0
# simulate rolling the dice
roll_dice <- function() {
sample(1:6, 1, replace = TRUE)
}
# simulate playing the game
play_game <- function() {
while (player1_pos < 100 & player2_pos < 100) {
# player 1's turn
player1_roll <- roll_dice()
player1_pos <- player1_pos + player1_roll
if (player1_pos > 100) {
player1_pos <- 100 - (player1_pos - 100)
}
player1_pos <- player1_pos + board[player1_pos]
if (player1_pos < 0) {
player1_pos <- 0
}
if (player1_pos == 100) {
return("Player 1 wins!")
}
if (!is.na(player1_pos) & player1_pos < 0) {
player1_pos <- 0
}
# player 2's turn
player2_roll <- roll_dice()
player2_pos <- player2_pos + player2_roll
if (player2_pos > 100) {
player2_pos <- 100 - (player2_pos - 100)
}
player2_pos <- player2_pos + board[player2_pos]
if (player2_pos < 0) {
player2_pos <- 0
}
if (player2_pos == 100) {
return("Player 2 wins!")
}
if (!is.na(player2_pos) & player2_pos < 0) {
player2_pos <- 0
}
}
return("Game over.")
}
# play the game
play_game()
# define the game board
board <- c(0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
# define the starting positions for the players
player1_pos <- 0
player2_pos <- 0
# simulate rolling the dice
roll_dice <- function() {
sample(1:6, 1, replace = TRUE)
}
# simulate playing the game
play_game <- function() {
while (player1_pos < 100 & player2_pos < 100) {
# player 1's turn
player1_roll <- roll_dice()
player1_pos <- player1_pos + player1_roll
if (player1_pos > 100) {
player1_pos <- 100 - (player1_pos - 100)
}
player1_pos <- player1_pos + board[player1_pos]
if (player1_pos < 0) {
player1_pos <- 0
}
if (player1_pos == 100) {
return("Player 1 wins!")
}
if (!is.na(player1_pos) & player1_pos < 0) {
player1_pos <- 0
}
# player 2's turn
player2_roll <- roll_dice()
player2_pos <- player2_pos + player2_roll
if (player2_pos > 100) {
player2_pos <- 100 - (player2_pos - 100)
}
player2_pos <- player2_pos + board[player2_pos]
if (player2_pos < 0) {
player2_pos <- 0
}
if (player2_pos == 100) {
return("Player 2 wins!")
}
if (!is.na(player2_pos) & player2_pos < 0) {
player2_pos <- 0
}
}
return("Game over.")
}
# play the game
play_game()
# define the game board
board <- c(0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
# define the starting positions for the players
player1_pos <- 0
player2_pos <- 0
# simulate rolling the dice
roll_dice <- function() {
sample(1:6, 1, replace = TRUE)
}
# simulate playing the game
play_game <- function() {
while (player1_pos < 100 & player2_pos < 100) {
# player 1's turn
player1_roll <- roll_dice()
player1_pos <- player1_pos + player1_roll
if (player1_pos > 100) {
player1_pos <- 100 - (player1_pos - 100)
}
player1_pos <- player1_pos + board[player1_pos]
if (player1_pos < 0) {
player1_pos <- 0
}
if (player1_pos == 100) {
return("Player 1 wins!")
}
if (!is.na(player1_pos) & player1_pos < 0) {
player1_pos <- 0
}
player2_pos <- ifelse(player2_pos < 0, 0, player2_pos)
# player 2's turn
player2_roll <- roll_dice()
player2_pos <- player2_pos + player2_roll
if (player2_pos > 100) {
player2_pos <- 100 - (player2_pos - 100)
}
player2_pos <- player2_pos + board[player2_pos]
if (player2_pos < 0) {
player2_pos <- 0
}
if (player2_pos == 100) {
return("Player 2 wins!")
}
}
return("Game over.")
}
# play the game
play_game()
# define the game board
board <- c(0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
# define the starting positions for the players
player1_pos <- 0
player2_pos <- 0
# simulate rolling the dice
roll_dice <- function() {
sample(1:6, 1, replace = TRUE)
}
# simulate playing the game
play_game <- function() {
while (player1_pos < 100 & player2_pos < 100) {
# player 1's turn
player1_roll <- roll_dice()
player1_pos <- player1_pos + player1_roll
if (player1_pos > 100) {
player1_pos <- 100 - (player1_pos - 100)
}
player1_pos <- player1_pos + board[player1_pos]
if (player1_pos < 0) {
player1_pos <- 0
}
if (player1_pos == 100) {
return("Player 1 wins!")
}
if (!is.na(player1_pos) & player1_pos < 0) {
player1_pos <- 0
}
if (!is.na(player2_pos) & player2_pos < 0) {
player2_pos <- 0
}
# player 2's turn
player2_roll <- roll_dice()
player2_pos <- player2_pos + player2_roll
if (player2_pos > 100) {
player2_pos <- 100 - (player2_pos - 100)
}
player2_pos <- player2_pos + board[player2_pos]
if (player2_pos < 0) {
player2_pos <- 0
}
if (player2_pos == 100) {
return("Player 2 wins!")
}
}
return("Game over.")
}
# play the game
play_game()
# Define the range of numbers
numbers <- 1:100
# Loop through each number in the range
for (i in numbers) {
# If the number is divisible by 3 and 5, print "FizzBuzz"
if (i %% 3 == 0 & i %% 5 == 0) {
print("FizzBuzz")
# If the number is divisible by 3, print "Fizz"
} else if (i %% 3 == 0) {
print("Fizz")
# If the number is divisible by 5, print "Buzz"
} else if (i %% 5 == 0) {
print("Buzz")
# Otherwise, print the number itself
} else {
print(i)
}
}

missing_bad %>%
summarise(mean_sales = mean(sales))
missing_data <- missing_bad %>%
mutate(
# set "0" values to NA using ifelse
expenses = ifelse(expenses == 0, NA, expenses),
# set "missing" values to NA using case_when
sales = case_when(sales == "missing" ~ NA_character_,
TRUE ~ sales),
# convert to numeric
sales = as.numeric(sales)
)
missing_data %>%
group_by(region) %>%
summarise(
mean_sales = mean(sales),
mean_expenses = mean(expenses),
min_profit = min(expenses - sales),
max_profit = max(expenses - sales),
.groups = "drop")
missing_data %>%
group_by(region) %>%
summarise(
mean_sales = mean(sales, na.rm = TRUE),
mean_expenses = mean(expenses, na.rm = TRUE),
min_profit = min(expenses - sales, na.rm = TRUE),
max_profit = max(expenses - sales, na.rm = TRUE),
.groups = "drop"
)
missing_data %>%
group_by(year, product) %>%
summarise(
n_valid = sum(!is.na(sales)),
n_missing = sum(is.na(sales)),
prop_missing = mean(is.na(sales)),
.groups = "drop"
)
# remove any rows with any missing values
complete_data <- missing_data %>%
drop_na()
# remove any rows that are missing a value for sales
complete_sales <- missing_data %>%
drop_na(sales)
complete_data
complete_sales
install.packages("tidytuesdayR")
install.packages("Rtools")
tuesdata <- tidytuesdayR::tt_load('2023-05-02')
tuesdata <- tidytuesdayR::tt_load(2023, week = 18)
plots <- tuesdata$plots
species <- tuesdata$species
surveys <- tuesdata$surveys
# All packages used in this script:
library(portalr)
install.packages("portalr")
# All packages used in this script:
library(portalr)
library(dplyr)
download_observations(".")
data_tables <- load_rodent_data()
species_data <- data_tables[["species_table"]]
# All packages used in this script:
library(portalr)
library(dplyr)
download_observations(".")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
install.packages("plotly")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
install.packages("waffle")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
install.packages("ggbump")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(treemap)     # for treemap plots
install.packages("treemap")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(treemap)     # for treemap plots
install.packages("treemap")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(treemap)     # for treemap plots
install.packages("igraph")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(treemap)     # for treemap plots
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
install.packages("ggwordcloud")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
install.packages("tidytext")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
install.packages("sf")
install.packages("rnaturalearth")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
install.packages("sf")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
library(rnaturalearth) # for map data
install.packages("rnaturalearth")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
library(rnaturalearth) # for map data
library(rnaturalearthdata) # extra mapping data
install.packages("rnaturalearthdata")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
library(rnaturalearth) # for map data
library(rnaturalearthdata) # extra mapping data
library(gganimate)   # for animated plots
install.packages("gganimate")
library(tidyverse)   # data wrangling functions
library(ggthemes)    # for themes
library(patchwork)   # for combining plots
library(plotly)      # for interactive plots
# devtools::install_github("hrbrmstr/waffle")
library(waffle)      # for waffle plots
library(ggbump)      # for bump plots
library(ggwordcloud) # for word clouds
library(tidytext)    # for manipulating text for word clouds
library(sf)          # for mapping geoms
library(rnaturalearth) # for map data
library(rnaturalearthdata) # extra mapping data
library(gganimate)   # for animated plots
theme_set(theme_light())
# update column specification
ct <- cols(issue_category = col_factor(levels = c("tech", "returns", "sales", "other")))
# load data
survey_data <- read_csv(file = "data/survey_data.csv",
col_types = ct)
# create bar plot
bar <- ggplot(data = survey_data,
mapping = aes(x = issue_category,
fill = issue_category)) +
geom_bar(show.legend = FALSE) +
labs(x = "Issue Category",
y = "Count",
title = "Calls by Issue Category")
#create scatterplot
point <- ggplot(data = survey_data,
mapping = aes(x = wait_time,
y = call_time,
color = issue_category)) +
geom_point(alpha = 0.5) +
geom_smooth(method = lm, formula = y~x) +
labs(x = "Wait Time",
y = "Call Time",
color = "Issue Category",
title = "Wait Time by Call Time")
bar + point
bar +
# add left-justified text to the second bar
annotate(geom = "text",
label = "Our goal is to\nreduce this\ncategory",
x = 1.65, y = 150,
hjust = 0, vjust = 1,
color = "white", fontface = "bold",
angle = 45) +
# add a centred label to the third bar
annotate(geom = "label",
label = "Our goal is\nto increase this\ncategory",
x = 3, y = 75,
hjust = 0.5, vjust = 1,
color = " darkturquoise", fontface = "bold")
point +
# add a rectangle surrounding long call times
annotate(geom = "rect",
xmin = 100, xmax = 275,
ymin = 140, ymax = 180,
fill = "transparent", color = "red") +
# add a text label
annotate("text",
x = 260, y = 120,
label = "outliers") +
# add an line with an arrow from the text to the box
annotate(geom = "segment",
x = 240, y = 120,
xend = 200, yend = 135,
arrow = arrow(length = unit(0.5, "lines"))) +
# add a curved line with an arrow
# from the text to a wait time outlier
annotate(geom = "curve",
x = 280, y = 120,
xend = 320, yend = 45,
curvature = -0.5,
arrow = arrow(length = unit(0.5, "lines")))
survey_data <- read_csv(file = "data/survey_data.csv",
show_col_types = FALSE)
ggplot(survey_data, aes(x = wait_time)) +
geom_histogram()
ggplot(survey_data, aes(x = wait_time)) +
scale_x_continuous(name = "Wait time (seconds)",
breaks = seq(0, 600, 60)) +
geom_freqpoly(boundary = 0, binwidth = 15,
color = "black")
survey_data %>%
count(issue_category) %>%
ggplot(aes(fill = issue_category, values = n)) +
geom_waffle(
n_rows = 23, # try setting this to 10 (the default)
size = 0.33, # line size
make_proportional = FALSE, # use raw values
colour = "white", # line colour
flip = FALSE, # bottom-top or left-right
radius = grid::unit(0.1, "npc") # set to 0.5 for circles
) +
theme_enhance_waffle() + # gets rid of axes
scale_fill_colorblind(name = "Issue Category")
install.packages("tidytuesdayR")
install.packages("tidytuesdayR")
install.packages("tidytuesdayR")
install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2023-05-02')
tuesdata <- tidytuesdayR::tt_load(2023, week = 18)
plots <- tuesdata$plots
species <- tuesdata$species
surveys <- tuesdata$surveys
# All packages used in this script:
library(portalr)
library(dplyr)
download_observations(".")
data_tables <- load_rodent_data()
species_data <- data_tables[["species_table"]]
plots_data <- data_tables[["plots_table"]]
plot_treatments <- plots_data %>%
filter(year > 1977) |>
mutate(iso_date = as.Date(paste0(year, "-", month, "-", "01")),
plot = as.factor(plot)) %>%
select(iso_date, plot, treatment)
plots_data_longterm <- plot_treatments |>
group_by(plot) |>
summarize(treatment = case_when(
all(treatment == "control") ~ "control",
all(treatment == "exclosure") ~ "exclosure")) |>
filter(!is.na(treatment))
species_data <- species_data |>
filter(censustarget == 1, unidentified == 0)
survey_data <- summarize_individual_rodents(
time = "date",
length = "Longterm") |>
filter(year > 1977) |>
filter(species %in% unique(species_data$species))
write.csv(survey_data, "surveys.csv", row.names = FALSE, na = "")
write.csv(plots_data_longterm, "plots.csv", row.names = FALSE, na = "")
write.csv(species_data, "species.csv", row.names = FALSE, na = "")
?portalr
library(data.table)
all_data <- fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/MehrSongSpelke2016.csv")
library(data.table)
all_data <- fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/MehrSongSpelke2016.csv")
library(summarytools)
view(dfSummary(all_data))
library(dplyr)
experiment_one <- all_data %>% filter(exp1==1)
library(dplyr)
experiment_one <- all_data %>% filter(exp1==1)
baseline <- experiment_one$Baseline_Proportion_Gaze_to_Singer
baseline <- experiment_one$Baseline_Proportion_Gaze_to_Singer
plot(baseline)
hist(baseline)
mean(baseline)
## [1] 0.5210967
sd(baseline)
## [1] 0.1769651
baseline <- experiment_one$Baseline_Proportion_Gaze_to_Singer
plot(baseline)
t.test(baseline, mu=.5)
test_phase <- experiment_one$Test_Proportion_Gaze_to_Singer
plot(test_phase)
test_phase <- experiment_one$Test_Proportion_Gaze_to_Singer
plot(test_phase)
hist(test_phase)
mean(test_phase)
## [1] 0.5934913
sd(test_phase)
## [1] 0.1786884
t.test(test_phase, mu = .5)
t.test(test_phase, baseline, paired=TRUE, var.equal=TRUE)
t.test(test_phase, baseline, paired=TRUE, var.equal=TRUE)
difference_scores<-test_phase-baseline
t.test(difference_scores, mu=0)
difference_scores <- test_phase-baseline
length(difference_scores[difference_scores>0])
Phase <- rep(c("Baseline","Test"), each = 32)
Proportions <- c(baseline,test_phase)
plot_df <- data.frame(Phase,Proportions)
Phase <- rep(c("Baseline","Test"), each = 32)
Proportions <- c(baseline,test_phase)
plot_df <- data.frame(Phase,Proportions)
Phase <- rep(c("Baseline","Test"), each = 32)
Proportions <- c(baseline,test_phase)
plot_df <- data.frame(Phase,Proportions)
Phase <- rep(c("Baseline","Test"), each = 32)
Proportions <- c(baseline,test_phase)
plot_df <- data.frame(Phase,Proportions)
library(data.table)
all_data <- fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/MehrSongSpelke2016.csv")
library(summarytools)
view(dfSummary(all_data))
library(dplyr)
experiment_one <- all_data %>% filter(exp1==1)
baseline <- experiment_one$Baseline_Proportion_Gaze_to_Singer
plot(baseline)
hist(baseline)
mean(baseline)
## [1] 0.5210967
sd(baseline)
## [1] 0.1769651
t.test(baseline, mu=.5)
test_phase <- experiment_one$Test_Proportion_Gaze_to_Singer
plot(test_phase)
hist(test_phase)
mean(test_phase)
## [1] 0.5934913
sd(test_phase)
## [1] 0.1786884
t.test(test_phase, mu = .5)
t.test(test_phase, baseline, paired=TRUE, var.equal=TRUE)
t.test(test_phase, baseline, paired=TRUE, var.equal=TRUE)
difference_scores<-test_phase-baseline
t.test(difference_scores, mu=0)
difference_scores <- test_phase-baseline
length(difference_scores[difference_scores>0])
Phase <- rep(c("Baseline","Test"), each = 32)
Proportions <- c(baseline,test_phase)
plot_df <- data.frame(Phase,Proportions)
library(ggplot2)
ggplot(plot_df, aes(x=Phase, y=Proportions))+
geom_point()
mean_df <- aggregate(Proportions ~ Phase, plot_df, mean)
ggplot(plot_df, aes(x=Phase, y=Proportions))+
geom_point()+
geom_point(data=mean_df, color="Red", size=2)
ggplot(plot_df, aes(x=Phase, y=Proportions))+
geom_point()+
geom_bar(data=mean_df, stat="identity",aes(fill=Phase))
ggplot(plot_df, aes(x=Phase, y=Proportions))+
geom_bar(data=mean_df, stat="identity",aes(fill=Phase))+
geom_point()
difference_scores <- baseline-test_phase #calculate difference scores
standard_error <- sd(difference_scores)/sqrt(length(difference_scores)) #calculate SEM
ggplot(plot_df, aes(x=Phase, y=Proportions))+
geom_bar(data=mean_df, stat="identity",aes(fill=Phase))+
geom_errorbar(data=mean_df, aes(ymin=Proportions-standard_error,
ymax=Proportions+standard_error), width=.1) +
geom_point(alpha=.25)
difference_scores <- test_phase-baseline #calculate difference scores
standard_error <- sd(difference_scores)/sqrt(length(difference_scores)) #calculate SEM
mean_difference <- mean(difference_scores)
qplot(x="MeanDifference", y=mean_difference)+
geom_bar(stat="identity", width=.5, alpha=.5)+
geom_hline(yintercept=0)+
geom_point(aes(y=difference_scores), alpha=.25)+
geom_errorbar(aes(ymin=mean_difference-standard_error,
ymax=mean_difference+standard_error), width=.1)
t_test_results <- t.test(difference_scores)
lower_interval<- t_test_results$conf.int[1]
upper_interval<- t_test_results$conf.int[2]
qplot(x="MeanDifference", y=mean_difference)+
geom_bar(stat="identity", width=.5, alpha=.5)+
geom_hline(yintercept=0)+
geom_point(aes(y=difference_scores), alpha=.25)+
geom_errorbar(aes(ymin=lower_interval,
ymax=upper_interval), width=.1)
sample_sd   <- (sd(baseline)+sd(test_phase))/2
simulated_means <- length(1000)
for(i in 1:1000){
simulated_means[i] <- mean(rnorm(32,.5, sample_sd))
}
hist(simulated_means)
#simulation of mean differences
sample_sd   <- sd(baseline-test_phase)
simulated_mean_difference <- length(1000)
for(i in 1:1000){
simulated_mean_difference[i] <- mean(rnorm(32,0, sample_sd))
}
hist(simulated_mean_difference)
#simulation of mean difference
sample_sd   <- sd(baseline-test_phase)
simulated_mean_difference <- length(1000)
for(i in 1:1000){
simulated_mean_difference[i] <- mean(rnorm(32,0, sample_sd))
}
hist(simulated_mean_difference)
library(data.table)
all_data <- fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/MehrSongSpelke2016.csv")
#data from trials to show infant looking behavior didn't change due to chance
baseline <- experiment_one$Baseline_Proportion_Gaze_to_Singer
plot(baseline)
#looking at numbers, shows all data point for each infant as dot
plot(baseline)
#hist to show frequency proportions better
hist(baseline)
#mean and standard deviation for sample
mean(baseline)
sd(baseline)
t.test(baseline, mu=.5) #reported as "t(31) = .67, p = .505."
Phase <- rep(c("Baseline","Test"), each = 32)
Proportions <- c(baseline,test_phase)
plot_df <- data.frame(Phase,Proportions)
Phase <- rep(c("Baseline","Test"), each = 32)
Proportions <- c(baseline,test_phase)
plot_df <- data.frame(Phase,Proportions)
plot_df
t_test_results <- t.test(difference_scores)
lower_interval<- t_test_results$conf.int[1]
upper_interval<- t_test_results$conf.int[2]
ggplot(x="MeanDifference", y=mean_difference)+
geom_bar(stat="identity", width=.5, alpha=.5)+
geom_hline(yintercept=0)+
geom_point(aes(y=difference_scores), alpha=.25)+
geom_errorbar(aes(ymin=lower_interval,
ymax=upper_interval), width=.1)
t_test_results <- t.test(difference_scores)
lower_interval<- t_test_results$conf.int[1]
upper_interval<- t_test_results$conf.int[2]
qplot(x="MeanDifference", y=mean_difference)+
geom_bar(stat="identity", width=.5, alpha=.5)+
geom_hline(yintercept=0)+
geom_point(aes(y=difference_scores), alpha=.25)+
geom_errorbar(aes(ymin=lower_interval,
ymax=upper_interval), width=.1)

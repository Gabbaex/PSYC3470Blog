# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("a","b","c")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw()
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("a", "b", "c")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("a","b","c")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw()+geom_text(label = grades, position_dodge(width =.9), vjust=0.4)
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("a", "b", "c")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("a","b","c")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw()+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("a", "b", "c")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("a","b","c")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw()+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)+xlab("Students")
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("a", "b", "c")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("a","b","c")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw()+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)+xlab("Students")+ylab("Grades")
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("a", "b", "c")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("a","b","c")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw()+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)+xlab("Students")+ylab("Grades")+ggtitle("Student Performance")
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("A", "B", "C")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("a","b","c")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw()+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)+xlab("Students")+ylab("Grades")+ggtitle("Student Performance")
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("A", "B", "C")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("A","B","C")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw()+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)+xlab("Students")+ylab("Grades")+ggtitle("Student Performance")
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("A", "B", "C")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("A","B","C")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw(base size = 14)+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)+xlab("Students")+ylab("Grades")+ggtitle("Student Performance")
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("A", "B", "C")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("A","B","C")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw(base_size = size = 14)+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)+xlab("Students")+ylab("Grades")+ggtitle("Student Performance")
library(tidyverse)
grades <- c(2.5, 8, 4)
students <- c("A", "B", "C")
# same number of vectors, can list into tibble
student_performance <- tibble(students, grades)
# alternative syntax
student_performance <- tibble(
grades = c(2.5,8,4),
students = c("A","B","C")
)
# ggplot bar graph
ggplot(student_performance, aes(x = students, y = grades))+geom_bar(stat = "identity", width = 0.25, fill = "white", colour = "blue", linewidth = 1)+lims(y=c(0,10))+scale_y_continuous(breaks = 0:10, limits = c(0,10))+theme_bw(base_size = 14)+geom_text(label = grades, position = position_dodge(width  = .9), vjust = -0.4)+xlab("Students")+ylab("Grades")+ggtitle("Student Performance")
library(tidyverse)   # data wrangling functions
library(kableExtra)  # for nice tables
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
library(dplyr)
filtered_data <- tweets %>%
filter(favorite_count < 100) # thingy called pipe operator, sends data into next step aka filter
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count),
sd_favs = sd(favorite_count),
mean_RTs = mean(retweet_count),
median_RTs = median(retweet_count),
min_RTs = min(retweet_count),
max_RTs = max(retweet_count),
sd_RTs = sd(favorite_count))
favourite_summary
ggplot(tweets, aes(x = favorite_count)) +
geom_histogram(bins = 25) +
scale_x_continuous(trans = "pseudo_log",
breaks = c(0, 1, 10, 100, 1000, 10000))
tweet_summary <- tweets %>%
summarise(mean_favs = mean(favorite_count),
median_favs = quantile(favorite_count, .5),
n = n(),
min_date = min(created_at),
max_date = max(created_at))
glimpse(tweet_summary)
date_from <- tweet_summary$min_date %>% # inline code
format("%d %B, %Y")
date_to <- tweet_summary$max_date %>%
format("%d %B, %Y")
date_from <- tweet_summary$min_date %>% # inline code
format("%d %B, %Y")
?%>%
library(tidyverse)   # data wrangling functions
library(kableExtra)  # for nice tables
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
library(dplyr)
filtered_data <- tweets %>%
filter(favorite_count < 100) # thingy called pipe operator, sends data into next step aka filter
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count),
sd_favs = sd(favorite_count),
mean_RTs = mean(retweet_count),
median_RTs = median(retweet_count),
min_RTs = min(retweet_count),
max_RTs = max(retweet_count),
sd_RTs = sd(favorite_count))
favourite_summary
ggplot(tweets, aes(x = favorite_count)) +
geom_histogram(bins = 25) +
scale_x_continuous(trans = "pseudo_log",
breaks = c(0, 1, 10, 100, 1000, 10000))
tweet_summary <- tweets %>%
summarise(mean_favs = mean(favorite_count),
median_favs = quantile(favorite_count, .5),
n = n(),
min_date = min(created_at),
max_date = max(created_at))
glimpse(tweet_summary)
date_from <- tweet_summary$min_date %>% # inline code
format("%d %B, %Y")
date_to <- tweet_summary$max_date %>%
format("%d %B, %Y")
tweets_per_user <- tweets %>%
count(screen_name, sort = TRUE)
head(tweets_per_user)
unique_users <- nrow(tweets_per_user)
most_prolific <- slice(tweets_per_user, 1) %>%
pull(screen_name)
most_prolific_n <- slice(tweets_per_user, 1) %>%
pull(n)
unique_users <- nrow(tweets_per_user)
most_prolific <- slice(tweets_per_user, 1) %>%
pull(screen_name)
most_prolific_n <- slice(tweets_per_user, 1) %>%
pull(n)
tweets_grouped <- tweets %>%
group_by(verified)
verified <- tweets_grouped %>%
summarise(count = n(),
mean_favs = mean(favorite_count),
mean_retweets = mean(retweet_count)) %>%
ungroup()
verified
library(tidyverse)   # data wrangling functions
library(kableExtra)  # for nice tables
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
library(dplyr)
filtered_data <- tweets %>%
filter(favorite_count < 100) # thingy called pipe operator, sends data into next step aka filter
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count),
sd_favs = sd(favorite_count),
mean_RTs = mean(retweet_count),
median_RTs = median(retweet_count),
min_RTs = min(retweet_count),
max_RTs = max(retweet_count),
sd_RTs = sd(favorite_count))
favourite_summary
ggplot(tweets, aes(x = favorite_count)) +
geom_histogram(bins = 25) +
scale_x_continuous(trans = "pseudo_log",
breaks = c(0, 1, 10, 100, 1000, 10000))
tweet_summary <- tweets %>%
summarise(mean_favs = mean(favorite_count),
median_favs = quantile(favorite_count, .5),
n = n(),
min_date = min(created_at),
max_date = max(created_at))
glimpse(tweet_summary)
date_from <- tweet_summary$min_date %>% # inline code
format("%d %B, %Y")
date_to <- tweet_summary$max_date %>%
format("%d %B, %Y")
tweets_per_user <- tweets %>%
count(screen_name, sort = TRUE)
head(tweets_per_user)
unique_users <- nrow(tweets_per_user)
most_prolific <- slice(tweets_per_user, 1) %>%
pull(screen_name)
most_prolific_n <- slice(tweets_per_user, 1) %>%
pull(n)
tweets_grouped <- tweets %>%
group_by(verified)
verified <- tweets_grouped %>%
summarise(count = n(),
mean_favs = mean(favorite_count),
mean_retweets = mean(retweet_count)) %>%
ungroup()
verified
library(tidyverse)     # includes readr & tibble
library(rio)           # for almost any data import/export
library(haven)         # for SPSS, Stata,and SAS files
library(readxl)        # for Excel files
?data
data()
data(package = "tidyr")
data_census <- import("2018_Central_Park_Squirrel_Census_-_Squirrel_Data.csv")
glimpse(data_census)
glimpse(data_census)
summarise(data_census)
glimpse(data_census)
ggplot()
ggplot()
ggplot(data = data_census, mapping = aes(x = unique_squirrel_id, y = primary_fur_color))
ggplot()
ggplot(data = data_census, mapping = aes(x = age, y = primary_fur_color))
ggplot()
ggplot(data = data_census, mapping = aes(x = highlight_fur_color, y = primary_fur_color))
glimpse(data_census)
data_census$`Unique Squirrel ID`
glimpse(data_census)
data_census$`Unique Squirrel ID`
data_census$`Primary Fur Color`
ggplot()
ggplot(data = data_census, mapping = aes(x = Unique Squirrel ID, y = Primary Fur Color))
ggplot()
ggplot(data = data_census, mapping = aes(x = Unique Squirrel ID, y = Primary Fur Color))
ggplot()
ggplot(data = data_census, mapping = aes(x = Unique_Squirrel_ID, y = Primary Fur Color))
glimpse(data_census)
data_census$`Unique Squirrel ID`
data_census$`Primary Fur Color`
squirrel <- data_census$`Unique Squirrel ID`
color <- data_census$`Primary Fur Color`
ggplot()
ggplot(data = data_census, mapping = aes(x = squirrel, y = color))
ggplot()
ggplot(data = data_census, mapping = aes(x = squirrel, y = color))
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="red", shape=18, size = 5) + geom_point(color="black", shape=18, size = 3) + geom_smooth(method = "lm", color="green")
ggplot()
ggplot(data = data_census, mapping = aes(x = squirrel, y = color))
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="red", shape=18, size = 2) + geom_point(color="black", shape=18, size = 1) + geom_smooth(method = "lm", color="green")
ggplot()
ggplot(data = data_census, mapping = aes(x = squirrel, y = color))
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="white", shape=18, size = 1) + geom_smooth(method = "lm", color="green")
ggplot()
ggplot(data = data_census, mapping = aes(x = color, y = squirrel))
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="white", shape=18, size = 1)
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="white", shape=18, size = 1)
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census, aes(x=squirrel, y=color))+geom_histogram()
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + + lims(y=c(0,10)) + scale_y_continuous(breaks = 0:10, limits = c(0,10))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(0,10)) + scale_y_continuous(breaks = 0:10, limits = c(0,10))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(0,1000)) + scale_y_continuous(breaks = 0:1000, limits = c(0,1000))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(0,1000)) + scale_x_continuous(breaks = 0:1000, limits = c(0,1000))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(0,1000)) + scale_x_continuous(breaks = 0:1000, limits = c(0,1000))
ggplot()
data_census$`Unique Squirrel ID` <- as.numeric(data_census$`Unique Squirrel ID`)
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(0,1000)) + scale_y_continuous(breaks = 0:1000, limits = c(0,1000))
ggplot()
data_census$`Unique Squirrel ID` <- as.numeric(data_census$`Unique Squirrel ID`)
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(0,1000)) + scale_y_continuous(breaks = 0:1000, limits = c(0,1000))
glimpse(data_census)
data_census$`Unique Squirrel ID` <- as.numeric(data_census$`Unique Squirrel ID`)
data_census$`Primary Fur Color` <- as.numeric(data_census$`Primary Fur Color`)
squirrel <- data_census$`Unique Squirrel ID`
color <- data_census$`Primary Fur Color`
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(0,1000)) + scale_y_continuous(breaks = 0:1000, limits = c(0,1000))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(1,1000)) + scale_y_continuous(breaks = 1:1000, limits = c(1,1000))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(1,500)) + scale_y_continuous(limits = c(1,500)) + scale_x_continuous(limits = c(1,500))
glimpse(data_census)
squirrel <- data_census$`Unique Squirrel ID`
color <- data_census$`Primary Fur Color`
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(1,500)) + scale_y_continuous(limits = c(1,500)) + scale_x_continuous(limits = c(1,500))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(1,500))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(1,500))
library(tidyverse)   # data wrangling functions
library(kableExtra)  # for nice tables
tweets <- readRDS("ncod_tweets.rds")
glimpse(tweets)
hist(tweets$favorite_count) #fast way to get histogram
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
library(dplyr)
filtered_data <- tweets %>%
filter(favorite_count < 100) # thingy called pipe operator, sends data into next step aka filter
ggplot(tweets, aes(x=favorite_count))+geom_histogram()
favourite_summary <- summarise(tweets,
mean_favs = mean(favorite_count),
median_favs = median(favorite_count),
min_favs = min(favorite_count),
max_favs = max(favorite_count),
sd_favs = sd(favorite_count),
mean_RTs = mean(retweet_count),
median_RTs = median(retweet_count),
min_RTs = min(retweet_count),
max_RTs = max(retweet_count),
sd_RTs = sd(favorite_count))
favourite_summary
ggplot(tweets, aes(x = favorite_count)) +
geom_histogram(bins = 25) +
scale_x_continuous(trans = "pseudo_log",
breaks = c(0, 1, 10, 100, 1000, 10000))
tweet_summary <- tweets %>%
summarise(mean_favs = mean(favorite_count),
median_favs = quantile(favorite_count, .5),
n = n(),
min_date = min(created_at),
max_date = max(created_at))
glimpse(tweet_summary)
date_from <- tweet_summary$min_date %>% # inline code
format("%d %B, %Y")
date_to <- tweet_summary$max_date %>%
format("%d %B, %Y")
tweets_per_user <- tweets %>%
count(screen_name, sort = TRUE)
head(tweets_per_user)
unique_users <- nrow(tweets_per_user)
most_prolific <- slice(tweets_per_user, 1) %>%
pull(screen_name)
most_prolific_n <- slice(tweets_per_user, 1) %>%
pull(n)
tweets_grouped <- tweets %>%
group_by(verified)
verified <- tweets_grouped %>%
summarise(count = n(),
mean_favs = mean(favorite_count),
mean_retweets = mean(retweet_count)) %>%
ungroup()
verified
library(tidyverse)     # includes readr & tibble
library(rio)           # for almost any data import/export
library(haven)         # for SPSS, Stata,and SAS files
library(readxl)        # for Excel files
data(package = "tidyr")
data_census <- import("2018_Central_Park_Squirrel_Census_-_Squirrel_Data.csv")
glimpse(data_census)
squirrel <- data_census$`Unique Squirrel ID`
color <- data_census$`Primary Fur Color`
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) + lims(y=c(1,500))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) +
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1) +
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data = data_census, aes(x=data, y=color))+geom_histogram()
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data = data_census, aes(x=squirrel, y=color))+geom_histogram()
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data = data_census, aes(x=squirrel, y=color))+geom_histogram(x = squirrel, y =color)
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data = data_census, aes(x=squirrel, y=color))+geom_histogram(data_census, aes(x = squirrel, y = color))
glimpse(data_census)
squirrel <- data_census$`Unique Squirrel ID`
color <- data_census$`Primary Fur Color`
food <- data_census$Eating
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data = data_census, aes(x=squirrel, y=eating)+geom_histogram(data_census, aes(x = squirrel, y = eating))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census)+geom_histogram(data_census, aes(x = squirrel, y = eating))
ggplot(data=survey_data, mapping= aes(x=wait_time)) + geom_histogram(bins=50, color="orange")
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census)+geom_histogram(data = data_census, mapping = aes(x = squirrel, y = eating))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census)+geom_histogram(data = data_census, mapping = aes(x = squirrel, y = food))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census)+geom_histogram(data = data_census, mapping = aes(y = food))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census)+geom_histogram(data = data_census, mapping = aes(x = food))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census)+geom_histogram(data = data_census, mapping = aes(x = squirrel))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census, stat = "count")+geom_histogram(data = data_census, mapping = aes(x = squirrel))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census, stat = count)+geom_histogram(data = data_census, mapping = aes(x = squirrel))
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census, aes(x = squirrel, y = food))+geom_col
ggplot()
ggplot(data_census, aes(x = squirrel, y = color)) + geom_point(color="brown", shape=18, size = 2) + geom_point(color="blue", shape=18, size = 1)
ggplot(data_census, aes(x = squirrel, y = food))+geom_col()
sum(50:100)
sum(50:100) # easy way but have to write function to find it
# function syntax
sum_sequence <- function(min,max) {
return(sum(min:max))
}
sum_sequence(min=5, max=100)
sum(50:100) # easy way but have to write function to find it
# function syntax
sum_sequence <- function(min,max){
return(sum(min:max))
}
sum_sequence(min=5, max=100)
sum_sequence_loop <- function(min,max){
a <- 0
for(i in min:max){
a <- a+i
}
return(a)
}
runif(500,0,500)
runif(50,0,50)

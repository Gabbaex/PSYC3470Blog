"0","longer_data <- pivot_longer("
"0","  data = untidy_data, "
"0","  cols = itemsprice_2018:totalprice_2020, # columns to make long "
"0","  names_to = c(""category"", ""year""), # new column names for cols"
"0","  names_sep = ""_"", # how to split cols into new columns"
"0","  # names_pattern = ""(.*)_(.*)"", # alternative to names_sep"
"0","  values_to = ""value"", # new column name for values"
"0","  "
"0","  # make sure new columns are the right data type"
"0","  names_transform = list(year = as.integer),"
"0","  values_transform = list(value = as.character) "
"0",")"
"0",""
"0",""
"0","wider_data <- pivot_wider("
"0","  data = longer_data,"
"0","  id_cols = c(customer_id, year),"
"0","  names_from = category,"
"0","  values_from = value"
"0",")"
"0",""
"0",""
"0","split_data <- separate("
"0","  data = wider_data, "
"0","  col = itemsprice, # the column to split"
"0","  into = c(""items"", ""price_per_item""), # the new columns to create"
"0","  sep = "" "", # split col by space"
"0","  remove = TRUE, # whether to remove to old col"
"0","  convert = TRUE # whether to fix the data type of the new columns"
"0",")"
"0",""
"0","mutated_data <- mutate("
"0","  .data = split_data,"
"0","  price_per_item = stringr::str_replace_all("
"0","    string = price_per_item, "
"0","    pattern = ""[()]"", "
"0","    replacement = """""
"0","  )"
"0",")"
"0",""
"0","# check the data types"
"0","glimpse(mutated_data)"
"1","Rows: 15"
"1",""
"1","
"
"1","Columns: 5"
"1",""
"1","
"
"1","$ customer_id    [3m[38;5;246m<dbl>[39m[23m 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5
$ year           [3m[38;5;246m<int>[39m[23m 2018, 2019, 2020, 2018, 2019, 2020, 2018, â€¦
$ items          [3m[38;5;246m<int>[39m[23m 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9â€¦
$ price_per_item [3m[38;5;246m<chr>[39m[23m ""3.91"", ""4.72"", ""5.59"", ""3.91"", ""4.72"", ""5â€¦
$ totalprice     [3m[38;5;246m<chr>[39m[23m ""7.82"", ""37.76"", ""55.9"", ""3.91"", ""28.32"", â€¦"
"1",""
"1","
"

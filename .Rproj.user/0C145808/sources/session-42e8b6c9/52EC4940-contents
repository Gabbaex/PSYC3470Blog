---
title: "Midterm part 2"
author: "Gabi Yepez"
date: "2023-03-28"
categories: [midterm]
image: "galaxy-brain-meme.jpg"
---

### midterm stuff

```{r}
# 1

a<-1
b<-2
c<-3

(a+b) / c

# 2

solution <- 1:100

a <- c()

for(i in 1:100) {
  a[i] <- i
}
a

i <- 0
a <- c()
while(i <= 100) {
  i <- i+1
  a[i] <- i
}

a
```

write sum for all integers between two values

```{r}
sum(50:100) # easy way but have to write function to find it

# function syntax
sum_sequence <- function(min,max){
  return(sum(min:max))
}

sum_sequence(min=5, max=100)

sum_sequence_loop <- function(min,max){
  a <- 0
   for(i in min:max){
    a <- a+i
   }
  return(a)
}


```

generate 100 random

```{r}
runif(50,0,50)

```

### number 10

```{r}
## mean

##

mean_B <- function(x){
  temp_sum <- 0
  temp_length <- 0
  for(i in x){
  temp_sum <- temp_sum+i
  temp_length <- temp_length+1
  }
  
  return(temp_sum/temp_length)
}
```

```{r}
## mode 

e <- c(1,1,1,1,1,2,3,4,5)

my_unique <- function(x){
  unique_number <- c()
  counter <- 0
  for(i in x){
    
    test_unique <- i == unique_number
    if(sum(test_unique) > 0) {
      counter <- counter+1
      unique_number[counter] <- unique_number
    }
    
    print(sum(test_unique))
    
  }
  
  return(unique_number)
}

my_unique(e)
```

### 1 Fizzbuzz Problem

```{r}
# Define the range of numbers
numbers <- 1:100

# Loop through each number in the range
for (i in numbers) {
  
  # If the number is divisible by 3 and 5, print "FizzBuzz"
  if (i %% 3 == 0 & i %% 5 == 0) {
    print("FizzBuzz")
    
  # If the number is divisible by 3, print "Fizz"
  } else if (i %% 3 == 0) {
    print("Fizz")
    
  # If the number is divisible by 5, print "Buzz"
  } else if (i %% 5 == 0) {
    print("Buzz")
    
  # Otherwise, print the number itself
  } else {
    print(i)
  }
}

```

### 2 Snakes and Ladders Problem

```{r}
# define the game board
board <- c(0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

# define the starting positions for the players
player1_pos <- 0
player2_pos <- 0

# simulate rolling the dice
roll_dice <- function() {
  sample(1:6, 1, replace = TRUE)
}

# simulate playing the game
play_game <- function() {
  while (player1_pos < 100 & player2_pos < 100) {
    # player 1's turn
    player1_roll <- roll_dice()
    player1_pos <- player1_pos + player1_roll
    if (player1_pos > 100) {
      player1_pos <- 100 - (player1_pos - 100)
    }
    player1_pos <- player1_pos + board[player1_pos]
    if (player1_pos < 0) {
      player1_pos <- 0
    }
    if (player1_pos == 100) {
      return("Player 1 wins!")
    }
    if (!is.na(player1_pos) & player1_pos < 0) {
  player1_pos <- 0
    }
    if (!is.na(player2_pos) & player2_pos < 0) {
  player2_pos <- 0
    }
    


    
    # player 2's turn
    player2_roll <- roll_dice()
    player2_pos <- player2_pos + player2_roll
    if (player2_pos > 100) {
      player2_pos <- 100 - (player2_pos - 100)
    }
    player2_pos <- player2_pos + board[player2_pos]
    if (player2_pos < 0) {
      player2_pos <- 0
    }
    if (player2_pos == 100) {
      return("Player 2 wins!")
    }
  }
  return("Game over.")
}

# play the game
play_game()

```

### 3 Dice-rolling simulations

```{r}
# set the number of dice rolls
num_rolls <- 100

# simulate rolling a six-sided dice
dice_rolls <- sample(1:6, num_rolls, replace = TRUE)

# print the results
print(dice_rolls)

```

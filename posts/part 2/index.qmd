---
title: "Midterm: Part II"
author: "Gabi Yepez"
date: "2023-03-28"
categories: [Midterm]
image: "midterm.jpg"
---

# M2: *Solving Problems*

## 1

> Do simple math with numbers, addition, subtraction, multiplication, division

```{r}
1+1
3-4
4*4
10/2
```

## 2

> Put numbers into variables, do simple math on the variables

```{r}
a<-1
b<-2
c<-3

(a+b) / c
```

## 3

> Write code that will place the numbers 1 to 100 separately into a variable using for loop. Then, again using the seq function.

```{r}
solution <- 1:100

a <- c()

for(i in 1:100) {
  a[i] <- i
}
a

i <- 0
a <- c()
while(i <= 100) {
  i <- i+1
  a[i] <- i
}

a
```

## 5

> Write a function to find the sum of all integers between any two values

```{r}
sum(50:100) # easy way but have to write function to find it

# function syntax
sum_sequence <- function(min,max){
  return(sum(min:max))
}

sum_sequence(min=5, max=100)

sum_sequence_loop <- function(min,max){
  a <- 0
   for(i in min:max){
    a <- a+i
   }
  return(a)
}


```

## 7

> List all of the prime numbers from 1 to 1000

```{r}
a <- 1:1000

isprime <- function(x) {
  generate_sequence <- 1:x
  counter <- 0
  for(i in generate_sequence){
    if(x%%i == 0){
      counter <- counter+1
    }
  }
  
  if(counter <= 2) {
    return(TRUE)
  } else{
    return(FALSE)
  }
}

for(i in a){
  if(isprime(i) == TRUE) print(i)
}
```

## 9

> Generate 100 random numbers within a specific range

```{r}
runif(100,0,100)

```

## 10

```{r}
## mean

mean_B <- function(x){
  temp_sum <- 0
  temp_length <- 0
  for(i in x){
  temp_sum <- temp_sum+i
  temp_length <- temp_length+1
  }
  
  return(temp_sum/temp_length)
}
```

```{r}
## mode 

e <- c(1,1,1,1,1,2,3,4,5)

my_unique <- function(x){
  unique_number <- c()
  counter <- 0
  for(i in x){
    
    test_unique <- i == unique_number
    if(sum(test_unique) > 0) {
      counter <- counter+1
      unique_number[counter] <- unique_number
    }
    
    print(sum(test_unique))
    
  }
  
  return(unique_number)
}
```

## Harder Problems

##### (*thank you chatgbt*)

### 1 Fizzbuzz

```{r}
# Define the range of numbers
numbers <- 1:100

# Loop through each number in the range
for (i in numbers) {
  
  # If the number is divisible by 3 and 5, print "FizzBuzz"
  if (i %% 3 == 0 & i %% 5 == 0) {
    print("FizzBuzz")
    
  # If the number is divisible by 3, print "Fizz"
  } else if (i %% 3 == 0) {
    print("Fizz")
    
  # If the number is divisible by 5, print "Buzz"
  } else if (i %% 5 == 0) {
    print("Buzz")
    
  # Otherwise, print the number itself
  } else {
    print(i)
  }
}

```

### 2 Dice-rolling simulations

```{r}
# set the number of dice rolls
num_rolls <- 100

# simulate rolling a six-sided dice
dice_rolls <- sample(1:6, num_rolls, replace = TRUE)

# print the results
print(dice_rolls)

```

### 3 Snakes and Ladders

```{r}
# Set up the game board
game_board <- data.frame(
  start = c(1, 4, 9, 16, 21, 28, 36, 44, 52, 67, 71, 80, 87),
  end = c(38, 14, 31, 6, 42, 84, 44, 26, 72, 86, 91, 100, 24)
)

# Define a function to simulate a single turn
simulate_turn <- function(current_position) {
  # Roll the dice
  dice_roll <- sample(1:6, 1)

  # Move the player
  new_position <- current_position + dice_roll

  # Check for a ladder or snake
  ladder_or_snake <- which(game_board$start == new_position)
  if (length(ladder_or_snake) > 0) {
    new_position <- game_board$end[ladder_or_snake]
    message(paste0("Landed on a ladder! Moving to position ", new_position, "."))
  } else {
    ladder_or_snake <- which(game_board$end == new_position)
    if (length(ladder_or_snake) > 0) {
      new_position <- game_board$start[ladder_or_snake]
      message(paste0("Landed on a snake! Moving to position ", new_position, "."))
    }
  }

  # Make sure the player didn't go past the end of the board
  if (new_position > 100) {
    new_position <- current_position
  }

  # Return the new position
  return(new_position)
}

# Define a function to simulate a full game
simulate_game <- function() {
  # Initialize the game
  position <- 0
  turns <- 0

  # Loop until the player reaches the end of the board
  while (position < 100) {
    # Simulate a turn
    position <- simulate_turn(position)
    turns <- turns + 1

    # Print the current position
    message(paste0("Current position: ", position, "."))
  }

  # Print the number of turns it took to win
  message(paste0("You won in ", turns, " turns!"))
}

# Run the game
simulate_game()
```
